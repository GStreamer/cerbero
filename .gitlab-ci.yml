include:
  - project: 'freedesktop/ci-templates'
    ref: 'master'
    file: '/templates/fedora.yml'
  - project: 'freedesktop/ci-templates'
    ref: 'master'
    file: '/templates/ubuntu.yml'
  ###
  # IMPORTANT
  # These are the version tags for the docker images the CI runs against.
  # If you are hacking on them or need a them to rebuild, its enough
  # to change any part of the string of the image you want.
  ###
  - local: '.gitlab-image-tags.yml'

stages:
  - 'trigger'
  - 'build docker'
  - 'check sources'
  - 'tests'
  - 'build'
  # Use the resulting binaries
  - 'integrate'

variables:
  # CI_GSTREAMER_* variables are set by gstreamer's CI when it triggers cerbero CI.
  CI_GSTREAMER_TRIGGERED: 'false'
  GST_UPSTREAM_BRANCH: 'main'
  DEFAULT_CERBERO_ARGS: >
    --variants werror
    --clocktime
    --timestamps
  MESON_COMMIT:
    description: "Overwrite the meson version installed on the CI images with the specified meson commit"
    value: ""

workflow:
  # https://docs.gitlab.com/ee/ci/yaml/index.html#switch-between-branch-pipelines-and-merge-request-pipelines
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        GIT_FETCH_EXTRA_FLAGS: '--no-tags'
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH'
      variables:
        GIT_FETCH_EXTRA_FLAGS: '--no-tags'

#
# Global CI policy
#
# This can be used to configure global behaviour our our jobs.
#
default:
  retry:
    max: 2
    when:
      - 'runner_system_failure'
      - 'stuck_or_timeout_failure'
      - 'scheduler_failure'
      - 'api_failure'
  interruptible: true

.fedora image:
  variables:
    FDO_DISTRIBUTION_TAG: "$FEDORA_TAG"
    FDO_DISTRIBUTION_VERSION: '40'
    FDO_DISTRIBUTION_PACKAGES: "sudo git-core lbzip2 rsync wine which xorg-x11-server-Xvfb python3-distro python3-distro-info python3-setuptools"
    FDO_DISTRIBUTION_EXEC: ci/docker_setup.sh
    FDO_UPSTREAM_REPO: gstreamer/cerbero

.checks fedora image:
  variables:
    FDO_DISTRIBUTION_TAG: "$CHECKS_FEDORA_TAG"
    FDO_DISTRIBUTION_VERSION: '40'
    FDO_DISTRIBUTION_PACKAGES: "git-core python3-pip"
    FDO_DISTRIBUTION_EXEC: ci/checks_setup.sh
    FDO_UPSTREAM_REPO: gstreamer/cerbero
    FDO_REPO_SUFFIX: checks

.android fedora image:
  variables:
    FDO_DISTRIBUTION_TAG: "$ANDROID_FEDORA_TAG"
    FDO_DISTRIBUTION_VERSION: '40'
    FDO_DISTRIBUTION_PACKAGES: "file git-core java-11-openjdk-devel lbzip2 python3-distro python3-distro-info make pkg-config unzip which xz python3-setuptools"
    FDO_DISTRIBUTION_EXEC: ci/docker_android_setup.sh $ANDROID_HOME $ANDROID_NDK_HOME $GST_UPSTREAM_BRANCH
    FDO_UPSTREAM_REPO: gstreamer/cerbero
    FDO_REPO_SUFFIX: android
    ANDROID_HOME: "/android/sdk"
    ANDROID_NDK_HOME: "/android/ndk"

.ubuntu image:
  variables:
    FDO_DISTRIBUTION_TAG: "$UBUNTU_TAG"
    FDO_DISTRIBUTION_VERSION: "22.04"
    FDO_DISTRIBUTION_PACKAGES: >-
      bash
      ca-certificates
      curl
      git
      lbzip2
      python3-distro
      python3-distro-info
      python3-venv
      python3-setuptools
      rsync
      ssh-client
      sudo
    FDO_DISTRIBUTION_EXEC: "ci/docker_setup.sh"
    FDO_UPSTREAM_REPO: "gstreamer/cerbero"

.tests ubuntu image:
  variables:
    FDO_DISTRIBUTION_TAG: "$TESTS_UBUNTU_TAG"
    FDO_DISTRIBUTION_VERSION: "22.04"
    FDO_DISTRIBUTION_PACKAGES: >-
      bash
      ca-certificates
      curl
      file
      git
      lbzip2
      pkg-config
      python3-distro
      python3-distro-info
      python3-venv
      python3-setuptools
      python3-minimal
      python3-xmlrunner
      rsync
      ssh-client
      sudo
      xz-utils
    FDO_UPSTREAM_REPO: gstreamer/cerbero
    FDO_REPO_SUFFIX: tests

manual trigger:
  image: "debian:stable-slim"
  stage: "trigger"
  variables:
    GIT_STRATEGY: "none"
  tags: [ "placeholder-job" ]
  script:
    - echo "Trigger job done, now running the pipeline."
  rules:
    # If this pipeline is triggered from gstreamer, trigger the pipeline automatically
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    # If this pipeline is triggered by a schedule, trigger the pipeline automatically
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    # If this matches, it means the pipeline is running against either the main
    # or a stable branch, so make it automatic cause they need to update artifacts,
    # like the docs site or cerbero deps
    - if: '$CI_COMMIT_BRANCH == $GST_UPSTREAM_BRANCH'
    # If the MR is assigned to the Merge bot, trigger the pipeline automatically
    - if: '$CI_MERGE_REQUEST_ASSIGNEES == "gstreamer-merge-bot"'
    # When the assignee isn't the merge bot, require an explicit action to trigger the pipeline
    # to avoid wasting CI resources
    - if: '$CI_MERGE_REQUEST_ASSIGNEES != "gstreamer-merge-bot"'
      when: 'manual'

fedora image:
  stage: "build docker"
  needs: [ "manual trigger" ]
  extends:
    - .fedora image
    - .fdo.container-build@fedora
  variables:
    GIT_STRATEGY: none
  tags: [ 'placeholder-job' ]

checks fedora image:
  stage: "build docker"
  needs: []
  extends:
    - .checks fedora image
    - .fdo.container-build@fedora
  variables:
    GIT_STRATEGY: none
  tags: [ 'placeholder-job' ]

tests ubuntu image:
  stage: "build docker"
  extends:
    - .tests ubuntu image
    - .fdo.container-build@ubuntu
  variables:
    GIT_STRATEGY: none
  tags: [ 'placeholder-job' ]

android fedora image:
  stage: "build docker"
  needs: [ "manual trigger" ]
  extends:
    - .android fedora image
    - .fdo.container-build@fedora
  variables:
    GIT_STRATEGY: none
  tags: [ 'placeholder-job' ]

ubuntu image:
  stage: "build docker"
  needs: [ "manual trigger" ]
  extends:
    - .ubuntu image
    - .fdo.container-build@ubuntu
  variables:
    GIT_STRATEGY: none
  tags: [ 'placeholder-job' ]

# Rules for when to use a specific job

# Used when a GStreamer MR is used using the triggered pipeline
.cerbero mr rules:
  rules:
    - if: '$CI_GSTREAMER_TRIGGERED == "true"'
  # Don't interrupt gstreamer MR CI when cerbero main gets pushes
  interruptible: false

# Used when any other usage is encountered, cerbero MR, branch push, etc
.cerbero not-mr rules:
  rules:
    - if: '$CI_GSTREAMER_TRIGGERED != "true"'

# Template for all Cerbero GStreamer builds
#
# Parameters:
# CONFIG: The name of the configuration file to use
# ARCH: The cerbero <os>_<cpu> (used in cache key)
#
.cerbero:
  stage: "build"
  # Ensure that the runners it will be executed on
  # will have plenty of space for the cache
  tags: ['gstreamer']
  timeout: '3h'
  variables:
    CCACHE_COMPILERCHECK: "content"
    CCACHE_COMPRESS: "true"
    CCACHE_BASEDIR: "/cache/gstreamer/cerbero/"
    CCACHE_DIR: "/cache/gstreamer/cerbero/ccache/"
    # shared across everything really
    CCACHE_MAXSIZE: "50G"

    CERBERO_HOME: "cb"
    CERBERO_SOURCES: "cerbero-sources"
    CERBERO_ARGS: "${DEFAULT_CERBERO_ARGS}"
    CERBERO: "./cerbero-uninstalled -c config/${CONFIG} -c localconf.cbc"
    CERBERO_PACKAGE_ARGS: "-t"
    CERBERO_RUN_SUFFIX: "" # '.exe' on cross-winXX
    CERBERO_BOOTSTRAP_SYSTEM: "no"
    HAVE_CCACHE: "yes"
    # location where the cerbero git repo is stored on the image
    CERBERO_HOST_DIR: "/"
  before_script:
    - echo $CI_PIPELINE_SOURCE
    # cmake takes forever to bootstrap from source
    # - test $(uname) = Darwin && pip3 install cmake==3.24.*
    - ./ci/cerbero_setup.sh cerbero_before_script
    - test $(uname) = Linux && cat /proc/self/limits
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - "${CERBERO_SOURCES}"
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHA}"
    expire_in: '5 days'
    when: 'always'
    paths:
      - "*/logs"
      - "*/sources/**/b/meson-logs/meson-log.txt"
      - "*/sources/**/b/CMakeFiles/CMakeError.log"
      - "*/sources/**/b/CMakeFiles/CMakeLog.log"
      - "*.tar.*"
    exclude:
      - .git
      - .git/**/*

.cerbero fedora base:
  extends:
    - .fedora image
    - .fdo.distribution-image@fedora
  needs:
    - "fedora image"

.cerbero ubuntu base:
  extends:
    - .ubuntu image
    - .fdo.distribution-image@ubuntu
  needs:
    - "ubuntu image"

# Template for Cerbero GStreamer Deps
#
# This template is used by cerbero/ project to pre-built the GStreamer
# dependencies. When available, the .cerbero jobs will download this artifact
# in order to speed up the build.
#
# Parameters:
# CONFIG: The name of the configuration file to use
# ARCH: The cerbero <os>_<cpu> (used in cache key)
#
# Produce an artifact with the dist/ and .cache along
# with the associated build-tools.
.cerbero deps:
  extends:
    - '.cerbero'
    - '.cerbero not-mr rules'
  script:
    - ./ci/cerbero_setup.sh cerbero_deps_script

# Template for Cerbero GStreamer MR Pipelines
#
# This template is used when a cerbero pipeline is triggered by a merge request
# in another project such as gstreamer running inside the GSTreamer namespace
# which implies that the default cerbero branch is used. In that case, we fetch
# a cache (if available) and use it instead of building from scratch.
.cerbero mr:
  extends:
    - '.cerbero'
    - '.cerbero mr rules'
  script:
    - ./ci/cerbero_setup.sh cerbero_script

pre-commit checks:
  extends:
    - .checks fedora image
    - .fdo.suffixed-image@fedora
  needs:
    - "checks fedora image"
  stage: 'check sources'
  script:
    pre-commit run --all-files --show-diff-on-failure
  variables:
    PRE_COMMIT_HOME: '/cache/${CI_PROJECT_NAMESPACE}/pre-commit'
  tags: [ 'placeholder-job' ]

tests:
  extends:
    - .tests ubuntu image
    - .fdo.suffixed-image@ubuntu
  needs:
    - "tests ubuntu image"
  stage: 'tests'
  script:
    python3 -m xmlrunner --output-file tests.xml discover -s test
  variables:
    CERBERO_UNINSTALLED: 1
    PYTHONPATH: ':./test:./cerbero'
  tags: [ 'placeholder-job' ]
  artifacts:
    when: always
    paths:
      - tests.xml
    reports:
      junit: tests.xml

#
# Cerbero Linux X86_64 build
#
cerbero deps fedora x86_64:
  extends:
    - '.cerbero fedora base'
    - '.cerbero deps'
  variables:
    CONFIG: "linux.config"
    ARCH: "linux_x86_64"

build cerbero fedora x86_64:
  extends:
    - '.cerbero fedora base'
    - '.cerbero mr'
  variables:
    CONFIG: "linux.config"

cerbero deps ubuntu x86_64:
  extends:
    - '.cerbero ubuntu base'
    - '.cerbero deps'
  variables:
    CONFIG: "linux.config"
    ARCH: "linux_x86_64"

build cerbero ubuntu x86_64:
  extends:
    - '.cerbero ubuntu base'
    - '.cerbero mr'
  variables:
    CONFIG: "linux.config"

#
# Cerbero Android Universal build
#
.cerbero cross-android universal:
  variables:
    CONFIG: "cross-android-universal.cbc"
    ARCH: "android_universal"
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHA}"
    expire_in: '5 days'
    when: 'always'
    paths:
      - "*/logs"
      - "*/sources/**/b/meson-logs/meson-log.txt"
      - "*/sources/**/b/CMakeFiles/CMakeError.log"
      - "*/sources/**/b/CMakeFiles/CMakeLog.log"
      - "*[0-9].tar.*"
    exclude:
      - .git
      - .git/**/*

cerbero deps cross-android universal:
  extends:
    - '.cerbero fedora base'
    - '.cerbero deps'
    - '.cerbero cross-android universal'

build cerbero cross-android universal:
  extends:
    - '.cerbero fedora base'
    - '.cerbero mr'
    - '.cerbero cross-android universal'

#
# Cerbero Cross Windows builds
#

.cerbero deps cross-windows:
  extends:
    - '.cerbero fedora base'
    - '.cerbero deps'
  variables:
    CERBERO_RUN_SUFFIX: ".exe"
    CERBERO_PACKAGE_ARGS: ""
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHA}"
    expire_in: '5 days'
    when: 'always'
    paths:
      - "*/logs"
      - "*/sources/**/b/meson-logs/meson-log.txt"
      - "*/sources/**/b/CMakeFiles/CMakeError.log"
      - "*/sources/**/b/CMakeFiles/CMakeLog.log"
      - "*.msi"
    exclude:
      - .git
      - .git/**/*

cerbero deps cross-windows x86:
  extends: '.cerbero deps cross-windows'
  variables:
    CONFIG: "cross-win32.cbc"
    ARCH: "mingw_x86"

build cerbero cross win32:
  extends:
    - '.cerbero fedora base'
    - '.cerbero mr'
  variables:
    CONFIG: "cross-win32.cbc"
    CERBERO_RUN_SUFFIX: ".exe"

cerbero deps cross-windows x86_64:
  extends: '.cerbero deps cross-windows'
  variables:
    CONFIG: "cross-win64.cbc"
    ARCH: "mingw_x86_64"

build cerbero cross win64:
  extends:
    - '.cerbero fedora base'
    - '.cerbero mr'
  variables:
    CONFIG: "cross-win64.cbc"
    CERBERO_RUN_SUFFIX: ".exe"

#
# Build an Android App using the android binaries
#
.cross-android universal examples:
  # Ensure that the runners it will be executed on
  # will have plenty of space for the cache
  tags: ['gstreamer']
  extends:
    - .android fedora image
    - .fdo.suffixed-image@fedora
  stage: 'integrate'
  variables:
    OUTPUT_DIR: ${CI_PROJECT_DIR}/outputs/
    EXAMPLES_HOME: ${CI_PROJECT_DIR}/gstreamer/subprojects
    GSTREAMER_ROOT_ANDROID: ${CI_PROJECT_DIR}/cerbero-android-universal
  script:
    - ci/examples_setup.sh build_android_examples
  after_script:
    - rm -rf ${GSTREAMER_ROOT_ANDROID} gstreamer
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHA}"
    expire_in: '5 days'
    when: 'always'
    paths:
      - "${OUTPUT_DIR}"

cross-android universal examples:
  extends:
    - '.cross-android universal examples'
    - '.cerbero mr rules'
  needs:
    - "build cerbero cross-android universal"
    - "android fedora image"

cerbero cross-android universal examples:
  extends:
    - '.cross-android universal examples'
    - '.cerbero not-mr rules'
  needs:
    - "cerbero deps cross-android universal"
    - "android fedora image"

#
# Cerbero macOS Universal build
#
.cerbero cross-macos universal:
  variables:
    ARCH: "darwin_universal"
    CONFIG: "cross-macos-universal.cbc"
    CERBERO_PACKAGE_ARGS: ""
    HAVE_CCACHE: ""
    CERBERO_HOST_DIR: "/Users/gst-ci/cerbero/"
  cache: []
  needs: [ "manual trigger" ]
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHA}"
    expire_in: '5 days'
    when: 'always'
    paths:
      - "*/logs"
      - "*/sources/**/b/meson-logs/meson-log.txt"
      - "*/sources/**/b/CMakeFiles/CMakeError.log"
      - "*/sources/**/b/CMakeFiles/CMakeLog.log"
      - "gstreamer-1.0-1.*.pkg"
      - "gstreamer-1.0-devel-1.*.pkg"
    exclude:
      - .git
      - .git/**/*

.cerbero macos arm64 image:
  image: "registry.freedesktop.org/gstreamer/cerbero/macos-arm64/15-sequoia:2024-10-28.2"
  tags:
    - gst-mac-arm

cerbero deps cross-macos universal arm64-host:
  extends:
    - '.cerbero deps'
    - '.cerbero cross-macos universal'
    - '.cerbero macos arm64 image'

build cerbero cross-macos universal arm64-host:
  extends:
    - '.cerbero mr'
    - '.cerbero cross-macos universal'
    - '.cerbero macos arm64 image'

#
# Cerbero iOS build
#
.cerbero cross-ios universal:
  variables:
    ARCH: "ios_universal"
    CONFIG: "cross-ios-universal.cbc"
    CERBERO_ARGS: "${DEFAULT_CERBERO_ARGS} -v nowerror"
    CERBERO_PACKAGE_ARGS: ""
    HAVE_CCACHE: ""
    CERBERO_HOST_DIR: "/Users/gst-ci/cerbero/"
  cache: []
  needs: [ "manual trigger" ]
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHA}"
    expire_in: '5 days'
    when: 'always'
    paths:
      - "*/logs"
      - "*/sources/**/b/meson-logs/meson-log.txt"
      - "*/sources/**/b/CMakeFiles/CMakeError.log"
      - "*/sources/**/b/CMakeFiles/CMakeLog.log"
      - "gstreamer-1.0-*-ios-universal.pkg"
    exclude:
      - .git
      - .git/**/*

cerbero deps cross-ios universal arm64-host:
  extends:
    - '.cerbero deps'
    - '.cerbero cross-ios universal'
    - '.cerbero macos arm64 image'

build cerbero cross-ios universal arm64-host:
  extends:
    - '.cerbero mr'
    - '.cerbero cross-ios universal'
    - '.cerbero macos arm64 image'

#
# Build an iOS App using the iOS binaries
#
.cross-ios universal examples:
  stage: 'integrate'
  variables:
    EXAMPLES_HOME: gstreamer/subprojects
    # disable codesigning so we don't need developer identities on the CI
    # machines
    XCODE_BUILD_ARGS: >-
      CODE_SIGNING_REQUIRED="NO"
      CODE_SIGN_IDENTITY=""
      CODE_SIGNING_ALLOWED="NO"
      CODE_SIGN_ENTITLEMENTS=""
  script:
    - ci/examples_setup.sh build_ios_examples
  after_script:
    - rm -rf gstreamer
  cache: []

cross-ios universal examples arm64-host:
  extends:
    - '.cross-ios universal examples'
    - '.cerbero macos arm64 image'
    - '.cerbero mr rules'
  needs:
    - "build cerbero cross-ios universal arm64-host"

cerbero cross-ios universal examples arm64-host:
  extends:
    - '.cross-ios universal examples'
    - '.cerbero macos arm64 image'
    - '.cerbero not-mr rules'
  needs:
    - "cerbero deps cross-ios universal arm64-host"

#
# Cerbero Native Windows builds
#
.cerbero windows native:
  image: $WINDOWS_IMAGE
  needs: [ "manual trigger" ]
  tags:
    - 'docker'
    - 'windows'
    - 'gstreamer-windows'
    - '2022'
  variables:
    CONFIG: 'win64.cbc'
    CERBERO_HOST_DIR: "C:/cerbero"
    CERBERO_ARGS: "${DEFAULT_CERBERO_ARGS} -v nowerror"
    CERBERO_RUN_SUFFIX: ".exe"
    CERBERO_BOOTSTRAP_SYSTEM: "no"
    HAVE_CCACHE: ""
    CERBERO_PACKAGE_ARGS: ""
  before_script:
    # Test that the powershell script works
    - ./cerbero-uninstalled --help
    - C:\msys64\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc "./ci/cerbero_setup.sh cerbero_before_script"
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHA}"
    expire_in: '5 days'
    when: 'always'
    paths:
      - "*/logs"
      - "*/sources/**/b/meson-logs/meson-log.txt"
      - "*/sources/**/b/CMakeFiles/CMakeError.log"
      - "*/sources/**/b/CMakeFiles/CMakeLog.log"
      - "*.msi"
    exclude:
      - .git
      - .git/**/*

cerbero deps msvc x86_64:
  extends: ['.cerbero deps', '.cerbero windows native']
  variables:
    ARCH: 'msvc_x86_64'
  script:
    - C:\msys64\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc "./ci/cerbero_setup.sh cerbero_deps_script"

cerbero deps msvc x86:
  extends: ['.cerbero deps', '.cerbero windows native']
  variables:
    ARCH: 'msvc_x86'
    CONFIG: 'win32.cbc'
  script:
    - C:\msys64\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc "./ci/cerbero_setup.sh cerbero_deps_script"
  when: 'manual'

cerbero deps mingw x86_64:
  extends: ['.cerbero deps', '.cerbero windows native']
  variables:
    ARCH: 'mingw_x86_64'
    CERBERO_ARGS: "${DEFAULT_CERBERO_ARGS} -v nowerror,mingw"
  script:
    - C:\msys64\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc "./ci/cerbero_setup.sh cerbero_deps_script"
  when: 'manual'

cerbero deps mingw x86:
  extends: ['.cerbero deps', '.cerbero windows native']
  variables:
    ARCH: 'mingw_x86'
    CONFIG: 'win32.cbc'
    CERBERO_ARGS: "${DEFAULT_CERBERO_ARGS} -v nowerror,mingw"
  script:
    - C:\msys64\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc "./ci/cerbero_setup.sh cerbero_deps_script"
  when: 'manual'

build cerbero msvc x86_64:
  extends: ['.cerbero mr', '.cerbero windows native']
  variables:
    ARCH: 'msvc_x86_64'
  script:
    - C:\msys64\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc "./ci/cerbero_setup.sh cerbero_script"

build cerbero msvc x86:
  extends: ['.cerbero mr', '.cerbero windows native']
  variables:
    ARCH: 'msvc_x86'
    CONFIG: 'win32.cbc'
  script:
    - C:\msys64\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc "./ci/cerbero_setup.sh cerbero_script"
  when: 'manual'

build cerbero mingw x86_64:
  extends: ['.cerbero mr', '.cerbero windows native']
  variables:
    ARCH: 'mingw_x86_64'
    CERBERO_ARGS: "${DEFAULT_CERBERO_ARGS} -v nowerror,mingw"
  script:
    - C:\msys64\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc "./ci/cerbero_setup.sh cerbero_script"
  when: 'manual'

build cerbero mingw x86:
  extends: ['.cerbero mr', '.cerbero windows native']
  variables:
    ARCH: 'mingw_x86'
    CONFIG: 'win32.cbc'
    CERBERO_ARGS: "${DEFAULT_CERBERO_ARGS} -v nowerror,mingw"
  script:
    - C:\msys64\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc "./ci/cerbero_setup.sh cerbero_script"
  when: 'manual'

# FIXME: UWP build is disabled until build issues with latest GLib version are sorted out
cerbero deps uwp universal:
  extends: ['cerbero deps msvc x86_64']
  variables:
    CONFIG: 'cross-uwp-universal.cbc'
    ARCH: 'uwp_universal'
    CERBERO_ARGS: "${DEFAULT_CERBERO_ARGS} -v nowerror"
  script:
    - C:\msys64\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc "./ci/cerbero_setup.sh cerbero_deps_script"
    - C:\msys64\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc "CERBERO_ARGS='$CERBERO_ARGS,vscrt=mdd' && ./ci/cerbero_setup.sh cerbero_deps_script"
  when: 'manual'

# FIXME: UWP build is disabled until build issues with latest GLib version are sorted out
build cerbero uwp universal:
  extends: ['build cerbero msvc x86_64']
  variables:
    CONFIG: 'cross-uwp-universal.cbc'
    ARCH: 'uwp_universal'
    CERBERO_ARGS: "${DEFAULT_CERBERO_ARGS} -v nowerror"
  script:
    - C:\msys64\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc "./ci/cerbero_setup.sh cerbero_script"
    - C:\msys64\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc "CERBERO_ARGS='$CERBERO_ARGS,vscrt=mdd' && ./ci/cerbero_setup.sh cerbero_script"
  when: 'manual'
