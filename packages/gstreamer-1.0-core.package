# vi:si:et:sw=4:sts=4:ts=4:syntax=python
# -*- Mode: Python -*-


class Package(custom.GStreamer, package.Package):

    name = 'gstreamer-1.0-core'
    shortdesc = 'GStreamer 1.0 core'
    longdesc = 'GStreamer 1.0 core'
    uuid = 'd9626750-e8b7-4e40-944d-98b67ed0c6bf'
    deps = ['base-system-1.0']

    files = ['gstreamer-1.0', 'gst-plugins-base-1.0:bins:libs:core:lang:typelibs',
            'gst-shell',
            'gst-plugins-good-1.0:plugins_core:lang',
            'gst-plugins-bad-1.0:plugins_core:lang:libs:typelibs',
            'gst-plugins-ugly-1.0:plugins_core:lang']
    files_devel = ['gstreamer-1.0', 'gst-plugins-base-1.0:plugins_core_devel',
            'gst-plugins-good-1.0:plugins_core_devel', 'gst-plugins-bad-1.0:plugins_core_devel']
    platform_files = {
        Platform.DARWIN: ['gstreamer-1.0-osx-framework', 'pkg-config'],
        Platform.WINDOWS: [],
        Platform.IOS: ['gstreamer-ios-templates'],
        Platform.ANDROID: ['gst-android-1.0'],
        Platform.LINUX: ['bash-completion'],
    }

    def prepare(self):
        # UWP cannot build pkg-config because it uses Autotools, and even if we
        # port it to Meson, the UWP toolchain still can't build a usable pkg-config.
        # On the other hand, UWP also doesn't need pkg-config because people
        # will likely only use it from inside Visual Studio.
        if not self.config.variants.uwp:
            self.platform_files[Platform.WINDOWS].append('pkg-config')
        if self.config.variants.unwind:
            self.files.append('libunwind:libs')
