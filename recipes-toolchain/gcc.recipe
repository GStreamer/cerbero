from pathlib import Path
import shutil
from cerbero.utils.git import GIT
from cerbero.utils import shell


class Recipe(recipe.Recipe):
    name = 'gcc'
    version = '14.2.0'
    licenses = [License.GPLv3Plus]
    stype = SourceType.CUSTOM
    add_host_build_target = False
    override_libtool = False
    requires_non_src_build = True
    deps = ['gcc-sources', 'mingw-w64-crt', 'winpthreads', 'gmp', 'mpc', 'mpfr',
            'isl', 'windows-default-manifest']

    # Note: on 8.2.0, the --disable-maintainer-mode flag was improperly
    # spaced, that meant we've been shipping --enable-shared all along!
    # For consistency I'm explicitly enabling it with 14.1.0+
    configure_options = [
        '--with-host-libstdcxx=\'-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm\'',
        '--disable-maintainer-mode',
        '--enable-shared',
        '--disable-libgomp',
        '--disable-libquadmath',
        '--disable-libquadmath-support',
        '--disable-libmudflap',
        '--disable-libmpx',
        '--disable-libssp',
        '--disable-libstdcxx-pch',
        '--disable-rpath',
        '--disable-win32-registry',
        '--disable-nls',
        '--disable-werror',
        '--disable-symvers',
        '--enable-bootstrap',
        '--enable-checking=release',
        '--enable-static',
        '--enable-libatomic',
        '--enable-threads=posix',
        '--enable-__cxa_atexit',
        '--enable-graphite',
        '--enable-fully-dynamic-string',
        '--enable-libstdcxx-filesystem-ts',
        '--enable-libstdcxx-time',
        '--enable-lto',
        '--enable-plugin',
        '--enable-multiarch',
        '--enable-languages=c,c++,lto',
        '--with-pkgversion="Built by GStreamer"',
        '--with-bugurl="https://gitlab.freedesktop.org/gstreamer/cerbero/-/issues"'
    ]

    def prepare(self):
        if self.config.target_arch == Architecture.X86:
            raise InvalidRecipeError(self)
        self.set_env ('CPP')
        self._target = 'x86_64-w64-mingw32'
        self.sysroot = f'{self.config.prefix}/{self._target}/sysroot'
        self.configure_options.append(f'--with-sysroot={self.sysroot}')
        self.configure_options.append(f'--with-local-prefix={self.sysroot}')
        self.configure_options.append(f'--target={self._target}')
        if self.config.target_platform == Platform.WINDOWS:
            self.configure_options.append(f'--host={self._target}')
        # Point to mingw-w64-headers's sysroot (see configure_tpl)
        self.configure_options.append(f'--with-native-system-header-dir=/usr/{self._target}/include')
        self.config_src_dir = os.path.join(self.config.sources, f'gcc-sources-{self.version}')
        self.build_dir = os.path.join(self.config_src_dir, 'gcc_build_final')
        self.make_dir = self.build_dir
        self.make += ['all']
        self.make_install = ['install-strip' if i == 'install' else i for i in self.make_install]
        # Describe version for future reference
        version = shell.check_output([GIT, 'describe'], cmd_dir=Path(__file__).parent, logfile=self.logfile, env=self.env, quiet=True).strip()
        self.configure_options = [opt.replace('GStreamer', f'GStreamer ({version})') for opt in self.configure_options]

    async def configure(self):
        Path(self.make_dir).mkdir(exist_ok=True)
        await super(Recipe, self).configure()

    def post_install(self):
        if self.config.target_platform == Platform.WINDOWS:
            bindir = os.path.join(self.config.prefix, 'bin')
            libdir = os.path.join(self.config.prefix, 'lib')
            lib32dir = os.path.join(self.config.prefix, 'lib32')
            # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89044
            os.remove(os.path.join(bindir, 'libstdc++-6.dll'))
            stdc64 = 'x86_64-w64-mingw32/libstdc++-v3/src/.libs/libstdc++-6.dll'
            stdc32 = 'x86_64-w64-mingw32/32/libstdc++-v3/src/.libs/libstdc++-6.dll'
            shutil.copy(os.path.join(self.make_dir, stdc64), libdir)
            shutil.copy(os.path.join(self.make_dir, stdc32), lib32dir)
        super().post_install()
