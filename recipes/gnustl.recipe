# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
import shutil

from cerbero.tools.libtool import LibtoolLibrary
from cerbero.tools.pkgconfig import PkgConfigWritter
from cerbero.utils import android

class Recipe(recipe.Recipe):
    name = 'gnustl'
    version = '0.1'
    licenses = [License.LGPLv2_1Plus]
    stype = SourceType.CUSTOM
    btype = BuildType.CUSTOM
    runtime_dep = True

    files_stl = [
            'lib/libc++_shared.so']
    files_devel= [
            'lib/pkgconfig/gnustl.pc',
            'lib/libgnustl.la',
            'lib/libandroid_support.a'
            ]

    def prepare(self):
        if self.config.target_platform != Platform.ANDROID:
            raise InvalidRecipeError(self, "Invalid platform")

    async def compile(self):
        libdir = os.path.join(self.config.prefix, 'lib')
        if not os.path.exists(libdir):
            os.makedirs(libdir)

        # Generate libraries that aren't copied from the NDK
        if self.config.target_arch in (Architecture.X86_64, Architecture.ARM64):
            shell.new_call([self.get_env('AR'), 'rc', os.path.join(libdir, 'libandroid_support.a')], env=self.env)

    async def install(self):
        libarch = android.get_android_arch_name(self.config.target_arch)
        stl_libdir = os.path.join(self.config.sysroot, '..')
        libdir = os.path.join(self.config.prefix, 'lib')
        if not os.path.exists(libdir):
            os.makedirs(libdir)

        # Copies libraries to the prefix
        shutil.copy(os.path.join(stl_libdir, 'libc++_shared.so'),
                    os.path.join(libdir, 'libc++_shared.so'))

        use_android_support = self.config.target_arch not in (Architecture.X86_64, Architecture.ARM64)
        if use_android_support:
            shutil.copy(os.path.join(stl_libdir, 'libandroid_support.a'),
                        os.path.join(libdir, 'libandroid_support.a'))

        # Create a libtool library for gnustl (libgnustl.la)
        lib = LibtoolLibrary('gnustl', None, None, None, libdir,
                self.config.target_platform)
        lib.change_value('dlname', 'libc++_shared.so')
        lib.change_value('library_names', 'libc++_shared.so libc++_shared.so libc++_shared.so')
        lib.change_value('old_library', '')
        lib.change_value('dependency_libs', '-lc++_shared -lm' +
                                (' %s/libandroid_support.a' % (libdir) if use_android_support else ''))
        lib.save()

        # Create pkg-config file (gnustl.pc)
        pkgdir = os.path.join(self.config.prefix, 'lib', 'pkgconfig')
        if not os.path.exists(pkgdir):
            os.makedirs(pkgdir)
        stl_pc = PkgConfigWritter('gnustl', 'gnustl', '2.0',
                '', '-L${libdir} ${libdir}/libc++_shared.so' +
                (' %s/libm.so' % self.config.sysroot) +
                (' ${libdir}/libandroid_support.a ' if use_android_support else '') +
                '',
                '',
                self.config.prefix)
        stl_pc.rel_incldir = 'include'
        stl_pc.save('gnustl', pkgdir)
