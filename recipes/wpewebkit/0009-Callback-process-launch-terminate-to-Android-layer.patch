From d94cbc1008e018828ae244f80245e61259b2abe6 Mon Sep 17 00:00:00 2001
From: Jani Hautakangas <jani@igalia.com>
Date: Fri, 13 May 2022 21:02:36 +0300
Subject: [PATCH] Callback process launch/terminate to Android layer

---
 .../Launcher/glib/ProcessLauncherGLib.cpp     | 48 ++++++++-----------
 1 file changed, 20 insertions(+), 28 deletions(-)

diff --git a/Source/WebKit/UIProcess/Launcher/glib/ProcessLauncherGLib.cpp b/Source/WebKit/UIProcess/Launcher/glib/ProcessLauncherGLib.cpp
index ae6687f5..8213dea1 100644
--- a/Source/WebKit/UIProcess/Launcher/glib/ProcessLauncherGLib.cpp
+++ b/Source/WebKit/UIProcess/Launcher/glib/ProcessLauncherGLib.cpp
@@ -43,7 +43,6 @@
 #include <wtf/text/WTFString.h>
 
 #include <dlfcn.h>
-#include <jni.h>
 
 namespace WebKit {
 
@@ -104,6 +103,8 @@ static bool isInsideSnap()
 
 void ProcessLauncher::launchProcess()
 {
+    typedef void (*wpe_android_launchProcess_t)(uint64_t pid, int processType, int *fds);
+
     IPC::Connection::SocketPair socketPair = IPC::Connection::createPlatformConnection(IPC::Connection::ConnectionOptions::SetCloexecOnServer);
 
     m_processIdentifier = m_launchOptions.processIdentifier.toUInt64();
@@ -114,23 +115,16 @@ void ProcessLauncher::launchProcess()
     WTFLogAlways("ProcessLauncher::launchProcess() processType %d pid %ld\n",
                  m_launchOptions.processType, m_processIdentifier);
 
-    JNIEnv* jniEnv = *reinterpret_cast<JNIEnv**>(dlsym(RTLD_DEFAULT, "s_BrowserGlue_env"));
-    jobject jniObj = *reinterpret_cast<jobject*>(dlsym(RTLD_DEFAULT, "s_BrowserGlue_object"));
-    {
-        jclass jClass = jniEnv->GetObjectClass(jniObj);
-        WTFLogAlways("  jClass for com/wpe/wpe/BrowserGlue %p", jClass);
-        jmethodID jMethodID = jniEnv->GetMethodID(jClass, "launchProcess", "(JI[I)V");
-        WTFLogAlways("  jMethodID for launchProcess %p", jMethodID);
-
-        jintArray fdArray = jniEnv->NewIntArray(2);
-        int fdArrayValues[2] = { socketPair.client, -1 };
-        jniEnv->SetIntArrayRegion(fdArray, 0, 2, fdArrayValues);
-
-        jniEnv->CallVoidMethod(jniObj, jMethodID, static_cast<long>(m_processIdentifier),
-                               static_cast<int>(m_launchOptions.processType), fdArray);
 
-        jniEnv->DeleteLocalRef(fdArray);
-        jniEnv->DeleteLocalRef(jClass);
+    wpe_android_launchProcess_t wpe_android_launchProcess =
+        reinterpret_cast<wpe_android_launchProcess_t>(
+            dlsym(RTLD_DEFAULT, "wpe_android_launchProcess"));
+    if (wpe_android_launchProcess == NULL) {
+        WTFLogAlways("ProcessLauncher::launchProcess() cannot find wpe_android_launchProcess\n");
+    } else {
+        int fds[2] = { socketPair.client, -1 };
+        wpe_android_launchProcess(m_processIdentifier,
+                                    static_cast<int>(m_launchOptions.processType), fds);
     }
 
     // We've finished launching the process, message back to the main run loop.
@@ -141,6 +135,8 @@ void ProcessLauncher::launchProcess()
 
 void ProcessLauncher::terminateProcess()
 {
+    typedef void (*wpe_android_terminateProcess_t)(uint64_t pid);
+
     if (m_isLaunching) {
         invalidate();
         return;
@@ -149,17 +145,13 @@ void ProcessLauncher::terminateProcess()
     WTFLogAlways("ProcessLauncher::terminateProcess() pid %ld\n",
                  m_processIdentifier);
 
-    JNIEnv* jniEnv = *reinterpret_cast<JNIEnv**>(dlsym(RTLD_DEFAULT, "s_BrowserGlue_env"));
-    jobject jniObj = *reinterpret_cast<jobject*>(dlsym(RTLD_DEFAULT, "s_BrowserGlue_object"));
-    {
-        jclass jClass = jniEnv->GetObjectClass(jniObj);
-        WTFLogAlways("  jClass for com/wpe/wpe/BrowserGlue %p", jClass);
-        jmethodID jMethodID = jniEnv->GetMethodID(jClass, "terminateProcess", "(J)V");
-        WTFLogAlways("  jMethodID for launchProcess %p", jMethodID);
-
-        jniEnv->CallVoidMethod(jniObj, jMethodID, static_cast<long>(m_processIdentifier));
-
-        jniEnv->DeleteLocalRef(jClass);
+    wpe_android_terminateProcess_t wpe_android_terminateProcess =
+        reinterpret_cast<wpe_android_terminateProcess_t>(
+            dlsym(RTLD_DEFAULT, "wpe_android_terminateProcess"));
+    if (wpe_android_terminateProcess == NULL) {
+        WTFLogAlways("ProcessLauncher::terminateProcess() cannot find wpe_android_launchProcess\n");
+    } else {
+        wpe_android_terminateProcess(m_processIdentifier);
     }
 }
 
-- 
2.25.1

