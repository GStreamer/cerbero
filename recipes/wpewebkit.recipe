# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
from cerbero.utils import android, shell

class Recipe(recipe.Recipe):
    name = 'wpewebkit'
    version = '2.30.4'
    stype = SourceType.TARBALL
    btype = BuildType.CMAKE
    url = 'https://wpewebkit.org/releases/wpewebkit-stable.tar.xz'
    tarball_checksum = '1e521d85cf8cf344b9fd08eabad7a1d18a330fb7862a77eaf78d7d7b10d5f6ef'
    deps = [
        'cairo',
        'gettext',
        'gstreamer-1.0',
        'gst-plugins-base-1.0',
        'gst-plugins-good-1.0',
        'gst-plugins-bad-1.0',
        'harfbuzz',
        'libepoxy',
        'libgcrypt',
        'libsoup',
        'libxslt',
        'libwpe'
    ]
    # TODO: support accessibility, gstreamer-gl and woff2
    configure_options = '-DPORT=WPE -DENABLE_ACCESSIBILITY=OFF \
                        -DUSE_GSTREAMER_GL=OFF -DUSE_WOFF2=OFF \
                        -DUSE_SYSTEMD=OFF -DENABLE_BUBBLEWRAP_SANDBOX=OFF \
                        -DHAVE_PTHREAD_NP_H=OFF \
                        -DENABLE_WEBDRIVER=OFF \
                        -Dis_android=1 \
                        -DCMAKE_SYSTEM_NAME=Linux \
                        -DCMAKE_BUILD_TYPE=RelWithDebInfo -GNinja'

    def prepare(self):
        if self.config.target_platform in (Platform.ANDROID):
            self.deps += ['libwebp']
            arch_lib_name = android.get_android_arch_name(self.config.target_arch)
            arch_src_name = self.config.target_arch
            if self.config.target_arch == Architecture.ARMv7:
                arch_src_name = 'arm'
            self.configure_options += ' -DCMAKE_SYSTEM_PROCESSOR=' + arch_src_name
            stl_libdir = os.path.join(self.config.toolchain_prefix, 'libs', arch_lib_name)
            self.append_env('LDFLAGS', '-L' + stl_libdir, '-landroid', '-llog', '-lm', '-lc++_shared', '-lintl')
            self.patches += ['wpewebkit/0001-Android-remove-uses-of-shm_open-and-shm_unlink.patch']


    async def compile(self):
        await shell.async_call(['ninja'], cmd_dir=self.build_dir, logfile=self.logfile)

    async def install(self):
        await shell.async_call(['ninja', 'install'], cmd_dir=self.build_dir, logfile=self.logfile)
