# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
from cerbero.tools.libtool import LibtoolLibrary

class Recipe(recipe.Recipe):
    name = 'svt-av1'
    version = '2.1.2'
    licenses = [{License.BSD_like: ['LICENSE.md']}]
    stype = SourceType.TARBALL
    btype = BuildType.CMAKE
    cmake_generator = 'ninja'
    can_msvc = True
    url = 'https://gitlab.com/AOMediaCodec/SVT-AV1/-/archive/v%(version)s/SVT-AV1-v%(version)s.tar.bz2'
    tarball_checksum = 'a1d95875f7539d49f7c8fdec0623fbf984804a168da6289705d53268e3b38412'
    tarball_dirname = 'SVT-AV1-v%(version)s'
    configure_options = ' -DBUILD_APPS=OFF'
    # svt-av1 handles BUILD_SHARED_LIBS itself and is ON by default
    library_type = LibraryType.SHARED

    # Decoder removed in 2.1.1 -- https://gitlab.com/AOMediaCodec/SVT-AV1/-/issues/2182
    files_bins = []
    files_libs = ['libSvtAv1Enc']
    files_devel = [
        'include/svt-av1/',
        '%(libdir)s/pkgconfig/SvtAv1Enc.pc',
    ]

    def prepare(self):
        if self.config.target_platform == Platform.ANDROID:
            compiler_driver = self.env.get('RUSTC_LINKER', '')
            self.configure_options += f' -DCMAKE_ASM_COMPILER={compiler_driver}'
            self.remove_env('CFLAGS', '-Wa,--noexecstack')
            self.remove_env('CXXFLAGS', '-Wa,--noexecstack')
            # https://gitlab.kitware.com/cmake/cmake/-/issues/18277
            self.prepend_env('PATH', self.get_env('ANDROID_NDK_TOOLCHAIN_BIN'), sep=os.pathsep)
            self.configure_options += f' -DANDROID_PLATFORM={DistroVersion.get_android_api_version(self.config.target_distro_version)}'

        # We only want static libs on iOS and Android
        if self.config.target_platform in (Platform.IOS, Platform.ANDROID):
            self.configure_options += ' -DBUILD_SHARED_LIBS=OFF '
            self.library_type = LibraryType.STATIC

    async def configure(self):
        if self.config.target_platform == Platform.WINDOWS:
            system_name = 'Windows'
        elif self.config.target_platform == Platform.LINUX:
            system_name = 'Linux'
        elif self.config.target_platform == Platform.DARWIN:
            system_name = 'Darwin'
        elif self.config.target_platform == Platform.IOS:
            system_name = 'iOS'

        # We always need a toolchain file because CMakeLists.txt requires these values to be set.
        # The Android NDK provides one, so we use that as-is.
        # This recipe uses these to decide which cpuinfo implementation to use:
        # https://gitlab.com/AOMediaCodec/SVT-AV1/-/blob/v2.1.2/third_party/cpuinfo/CMakeLists.txt#L55-82
        if self.config.target_platform == Platform.ANDROID:
            arch = self.config.target_arch
            if self.config.target_arch == Architecture.ARMv7:
                arch = 'armeabi-v7a'
            elif self.config.target_arch == Architecture.ARM64:
                arch = 'arm64-v8a'
            self.configure_options += f" -DCMAKE_TOOLCHAIN_FILE={self.config.env['ANDROID_NDK_HOME']}/build/cmake/android.toolchain.cmake -DANDROID_ABI={arch}"
        else:
            with open(f'{self.config_src_dir}/toolchain.cmake', 'w') as f:
                f.write(f'set(CMAKE_SYSTEM_NAME {system_name})\n')
                f.write(f'set(CMAKE_SYSTEM_PROCESSOR {self.config.target_arch})\n')
            self.configure_options += f' -DCMAKE_TOOLCHAIN_FILE={self.config_src_dir}/toolchain.cmake'

        await super().configure()

    def post_install(self):
        dependency_libs=[]
        if self.config.target_platform == Platform.ANDROID:
            dependency_libs += ['-lm']
            # Meson prefers shared lib lookup always
            shell.replace(f'{self.config.libdir}/pkgconfig/SvtAv1Enc.pc',
                              {'Libs:': 'Libs: -lm'})
        LibtoolLibrary('SvtAv1Enc', 2, 1, 2, self.config.libdir,
                self.config.target_platform, deps=dependency_libs).save()
        super().post_install()
