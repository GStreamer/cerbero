From 840ff4defbef03a14c08b90e64de77711542fa30 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tim-Philipp=20M=C3=BCller?= <tim@centricular.com>
Date: Fri, 24 Mar 2023 20:08:17 +0000
Subject: [PATCH 1/4] Add meson build based on wrapdb version 4.5.0-3

https://wrapdb.mesonbuild.com/v2/libtiff_4.5.0-3/get_patch
---
 LICENSE.build       |  19 ++++++++
 libtiff/meson.build |  73 ++++++++++++++++++++++++++++
 meson.build         | 115 ++++++++++++++++++++++++++++++++++++++++++++
 meson_options.txt   |  27 +++++++++++
 test/meson.build    |  59 +++++++++++++++++++++++
 5 files changed, 293 insertions(+)
 create mode 100644 LICENSE.build
 create mode 100644 libtiff/meson.build
 create mode 100644 meson.build
 create mode 100644 meson_options.txt
 create mode 100644 test/meson.build

diff --git a/LICENSE.build b/LICENSE.build
new file mode 100644
index 0000000..b59833d
--- /dev/null
+++ b/LICENSE.build
@@ -0,0 +1,19 @@
+Copyright (c) 2021 The Meson development team
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/libtiff/meson.build b/libtiff/meson.build
new file mode 100644
index 0000000..cf57365
--- /dev/null
+++ b/libtiff/meson.build
@@ -0,0 +1,73 @@
+tiffconf_h = configure_file(
+  input: 'tiffconf.h.cmake.in',
+  output: 'tiffconf.h',
+  format: 'cmake@',
+  configuration: cdata,
+)
+
+configure_file(
+  input: 'tif_config.h.cmake.in',
+  output: 'tif_config.h',
+  format: 'cmake@',
+  configuration: cdata,
+)
+
+sources = files(
+  'tif_aux.c',
+  'tif_close.c',
+  'tif_codec.c',
+  'tif_color.c',
+  'tif_compress.c',
+  'tif_dir.c',
+  'tif_dirinfo.c',
+  'tif_dirread.c',
+  'tif_dirwrite.c',
+  'tif_dumpmode.c',
+  'tif_error.c',
+  'tif_extension.c',
+  'tif_fax3.c',
+  'tif_fax3sm.c',
+  'tif_flush.c',
+  'tif_getimage.c',
+  'tif_hash_set.c',
+  'tif_jbig.c',
+  'tif_jpeg.c',
+  'tif_jpeg_12.c',
+  'tif_luv.c',
+  'tif_lzma.c',
+  'tif_lzw.c',
+  'tif_next.c',
+  'tif_ojpeg.c',
+  'tif_open.c',
+  'tif_packbits.c',
+  'tif_pixarlog.c',
+  'tif_predict.c',
+  'tif_print.c',
+  'tif_read.c',
+  'tif_strip.c',
+  'tif_swab.c',
+  'tif_thunder.c',
+  'tif_tile.c',
+  'tif_version.c',
+  'tif_warning.c',
+  'tif_webp.c',
+  'tif_write.c',
+  'tif_zip.c',
+  'tif_zstd.c',
+  'tif_@0@.c'.format(host_machine.system() == 'windows' ? 'win32' : 'unix'),
+)
+
+tiff4_lib = library(
+  'tiff4',
+  sources,
+  install: true,
+  dependencies: [m_dep, jbig_dep, jpeg_dep, lerc_dep, lzma_dep, webp_dep, zlib_dep, zstd_dep],
+  vs_module_defs: 'libtiff.def',
+)
+
+install_headers(
+  'tiff.h',
+  'tiffio.h',
+  'tiffvers.h',
+  tiffconf_h,
+)
diff --git a/meson.build b/meson.build
new file mode 100644
index 0000000..2360782
--- /dev/null
+++ b/meson.build
@@ -0,0 +1,115 @@
+project(
+  'tiff',
+  'c',
+  version: files('VERSION'),
+  meson_version: '>=0.57.0',
+)
+
+cc = meson.get_compiler('c')
+m_dep = cc.find_library('m', required: false)
+jbig_dep = cc.find_library('jbig', required: get_option('jbig'))
+jpeg_dep = dependency('libjpeg', required: get_option('jpeg'))
+lerc_dep = dependency('liblerc', required: get_option('lerc'))
+lzma_dep = dependency('liblzma', required: get_option('lzma'))
+webp_dep = dependency('libwebp', required: get_option('webp'))
+zlib_dep = dependency('zlib', required: get_option('zlib'))
+zstd_dep = dependency('libzstd', required: get_option('zstd'))
+
+cdata = configuration_data()
+
+cdata.set('HOST_FILLORDER', host_machine.endian() == 'big' ? 'FILLORDER_LSB2MSB' : 'FILLORDER_LSB2MSB')
+cdata.set10('HOST_BIG_ENDIAN', host_machine.endian() == 'big')
+
+cdata.set('TIFF_INT8_T', 'int8_t')
+cdata.set('TIFF_UINT8_T', 'uint8_t')
+cdata.set('TIFF_INT16_T', 'int16_t')
+cdata.set('TIFF_UINT16_T', 'uint16_t')
+cdata.set('TIFF_INT32_T', 'int32_t')
+cdata.set('TIFF_UINT32_T', 'uint32_t')
+cdata.set('TIFF_INT64_T', 'int64_t')
+cdata.set('TIFF_UINT64_T', 'uint64_t')
+cdata.set('TIFF_SSIZE_T', cc.sizeof('void*') == 8 ? 'int64_t' : 'int32_t')
+cdata.set('SIZEOF_SIZE_T', cc.sizeof('size_t'))
+
+check_headers = [
+  'assert.h',
+  'fcntl.h',
+  'GLUT/glut.h',
+  'io.h',
+  'GL/glut.h',
+  'GL/glu.h',
+  'GL/gl.h',
+  'OpenGL/glu.h',
+  'OpenGL/gl.h',
+  'strings.h',
+  'sys/types.h',
+  'unistd.h',
+]
+
+foreach h : check_headers
+  if cc.has_header(h)
+    cdata.set('HAVE_@0@'.format(h.underscorify().to_upper()), 1)
+  endif
+endforeach
+
+foreach f : ['fseeko', 'mmap', 'setmode']
+  if cc.has_function(f)
+    cdata.set('HAVE_@0@'.format(f.underscorify().to_upper()), 1)
+  endif
+endforeach
+
+cdata.set('HAVE_JBG_NEWLEN', jbig_dep.found())
+cdata.set10('HAVE_DECL_OPTARG', cc.has_header_symbol('unistd.h', 'optarg'))
+cdata.set10('HAVE_GETOPT', cc.has_header_symbol('getopt.h', 'getopt'))
+
+cdata.set('PACKAGE_BUGREPORT', 'tiff@lists.maptools.org')
+cdata.set('PACKAGE_NAME', 'LibTIFF Software')
+cdata.set('PACKAGE_STRING', '@0@ @1@'.format(cdata.get('PACKAGE_NAME'), meson.project_version()))
+cdata.set('PACKAGE_TARNAME', meson.project_name())
+cdata.set('PACKAGE_URL', 'https://gitlab.com/libtiff/libtiff')
+cdata.set('PACKAGE_VERSION', meson.project_version())
+
+cdata.set('CCITT_SUPPORT', true)
+cdata.set('PACKBITS_SUPPORT', true)
+cdata.set('LZW_SUPPORT', true)
+cdata.set('THUNDER_SUPPORT', true)
+cdata.set('NEXT_SUPPORT', true)
+cdata.set('LOGLUV_SUPPORT', true)
+cdata.set10('MDI_SUPPORT', true)
+cdata.set10('SUBIFD_SUPPORT', true)
+cdata.set('CXX_SUPPORT', false)
+cdata.set('CHUNKY_STRIP_READ_SUPPORT', false)
+
+cdata.set('LIBJPEG_12_PATH', '')
+cdata.set('STRIPCHOP_DEFAULT', 'TIFF_STRIPCHOP')
+cdata.set('DEFAULT_EXTRASAMPLE_AS_ALPHA', true)
+cdata.set('HAVE_IEEEFP', true)
+cdata.set('STRIP_SIZE_DEFAULT', 8192)
+
+cdata.set('JBIG_SUPPORT', jbig_dep.found())
+cdata.set('JPEG_SUPPORT', jpeg_dep.found())
+cdata.set('LERC_SUPPORT', lerc_dep.found())
+cdata.set('LZMA_SUPPORT', lzma_dep.found())
+cdata.set('WEBP_SUPPORT', webp_dep.found())
+cdata.set('ZSTD_SUPPORT', zstd_dep.found())
+cdata.set('ZIP_SUPPORT', zlib_dep.found())
+cdata.set('PIXARLOG_SUPPORT', zlib_dep.found())
+
+cdata.set('CHECK_JPEG_YCBCR_SUBSAMPLING', true)
+cdata.set('TIFF_MAX_DIR_COUNT', 1048576)
+
+subdir('libtiff')
+
+libtiff4_dep = declare_dependency(
+  include_directories: 'libtiff',
+  link_with: tiff4_lib,
+)
+
+import('pkgconfig').generate(
+  tiff4_lib,
+  filebase: 'libtiff-4',
+  name: 'libtiff',
+  description: 'Tag Image File Format (TIFF) library.',
+)
+
+subdir('test')
diff --git a/meson_options.txt b/meson_options.txt
new file mode 100644
index 0000000..2646f73
--- /dev/null
+++ b/meson_options.txt
@@ -0,0 +1,27 @@
+option('jbig', type: 'feature',
+  description: 'Build with libjbig support'
+)
+
+option('jpeg', type: 'feature',
+  description: 'Build with libjpeg support'
+)
+
+option('lerc', type: 'feature',
+  description: 'Build with liblerc support'
+)
+
+option('lzma', type: 'feature',
+  description: 'Build with liblzma support'
+)
+
+option('webp', type: 'feature',
+  description: 'Build with libwebp support'
+)
+
+option('zlib', type: 'feature',
+  description: 'Build with zlib support'
+)
+
+option('zstd', type: 'feature',
+  description: 'Build with libzstd support'
+)
diff --git a/test/meson.build b/test/meson.build
new file mode 100644
index 0000000..200ad84
--- /dev/null
+++ b/test/meson.build
@@ -0,0 +1,59 @@
+configure_file(
+  input: '../port/libport_config.h.cmake.in',
+  output: 'libport_config.h',
+  format: 'cmake@',
+  configuration: cdata,
+)
+
+tpinc = include_directories('../port')
+if not cc.has_function('getopt')
+  tpl = static_library(
+    'tiff_port',
+    '../port/getopt.c',
+    include_directories: tpinc,
+  )
+  tiff_port = declare_dependency(
+    include_directories: tpinc,
+    link_with: tpl,
+  )
+else
+  tiff_port = declare_dependency(
+    include_directories: tpinc,
+  )
+endif
+
+tests = [
+  'ascii_tag',
+  'custom_dir',
+  'custom_dir_EXIF_231',
+  'defer_strile_loading',
+  'defer_strile_writing',
+  'rewrite_tag',
+  'test_append_to_strip',
+  'test_directory',
+  'test_open_options',
+  'test_signed_tags',
+  'testtypes',
+]
+
+foreach t : tests
+  test(t, executable(t, '@0@.c'.format(t), dependencies: [libtiff4_dep, tiff_port]))
+endforeach
+
+test('short_tag', executable('short_tag', 'short_tag.c', 'check_tag.c', dependencies: [libtiff4_dep, tiff_port]))
+test('long_tag', executable('long_tag', 'long_tag.c', 'check_tag.c', dependencies: [libtiff4_dep, tiff_port]))
+
+test(
+  'strip_rw',
+  executable(
+    'strip_rw',
+    'strip_rw.c',
+    'strip.c',
+    'test_arrays.c',
+    dependencies: [libtiff4_dep, tiff_port],
+  )
+)
+
+if jpeg_dep.found()
+  test('raw_decode', executable('raw_decode', 'raw_decode.c', dependencies: [libtiff4_dep, tiff_port, jpeg_dep]), workdir: meson.current_source_dir())
+endif
-- 
2.40.0

