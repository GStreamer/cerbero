From 4f2c094d92bb5d16029333699dabad894e252e9b Mon Sep 17 00:00:00 2001
From: Nirbheek Chauhan <nirbheek@centricular.com>
Date: Thu, 23 Sep 2021 16:16:08 +0530
Subject: [PATCH] Load ca-certificate.crt from PREFIX/etc/ssl on macOS and
 Windows

PREFIX is automatically detected based on the location of the crypto
library.
---
 crypto/dllmain.c      | 31 +++++++++++++++++++++++++++
 crypto/x509/by_file.c | 50 ++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 80 insertions(+), 1 deletion(-)

diff --git a/crypto/dllmain.c b/crypto/dllmain.c
index e821789..67568e3 100644
--- a/crypto/dllmain.c
+++ b/crypto/dllmain.c
@@ -20,6 +20,36 @@
  */
 # endif
 
+HMODULE __priv_crypto_dll_handle = NULL;
+
+char *
+_get_portable_X509_cert_file (void)
+{
+    int ret;
+    char *p;
+    char filename[MAX_PATH];
+    char certfile[MAX_PATH];
+
+    /* Get absolute location of crypto.dll: PREFIX/bin/crypto.dll */
+    if (!GetModuleFileNameA(__priv_crypto_dll_handle, filename, MAX_PATH))
+        return NULL;
+
+    /* Get DLL directory: PREFIX/bin */
+    if ((p = strrchr(filename, '\\')) == NULL)
+        return NULL;
+    *p = '\0';
+
+    /* Get parent directory: PREFIX */
+    if ((p = strrchr(filename, '\\')) == NULL)
+        return NULL;
+    *p = '\0';
+
+    /* Path to the cert bundle; filename is from the ca-certificates recipe */
+    if (_snprintf(certfile, MAX_PATH, "%s\\etc\\ssl\\certs\\ca-certificates.crt", filename) < 0)
+        return NULL;
+    return _strdup(certfile);
+}
+
 /*
  * All we really need to do is remove the 'error' state when a thread
  * detaches
@@ -31,6 +61,7 @@ BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
     switch (fdwReason) {
     case DLL_PROCESS_ATTACH:
         OPENSSL_cpuid_setup();
+        __priv_crypto_dll_handle = (HMODULE) hinstDLL;
         break;
     case DLL_THREAD_ATTACH:
         break;
diff --git a/crypto/x509/by_file.c b/crypto/x509/by_file.c
index 237b362..5f67759 100644
--- a/crypto/x509/by_file.c
+++ b/crypto/x509/by_file.c
@@ -17,6 +17,56 @@
 #include <openssl/pem.h>
 #include "x509_local.h"
 
+// We only want to look for portable ca certificates when running on macOS,
+// not on iPhone, watchOS, tvOS, a simulator, etc.
+#ifdef __APPLE__
+#include "TargetConditionals.h"
+#if TARGET_OS_OSX
+#define WANT_PORTABLE_CERT_FILE_DLADDR
+#endif
+#endif
+
+#ifdef _WIN32
+/* defined in crypto/dllmain.c */
+char* _get_portable_X509_cert_file (void);
+#elif defined(WANT_PORTABLE_CERT_FILE_DLADDR)
+#include <dlfcn.h>
+char *
+_get_portable_X509_cert_file (void)
+{
+    char *fname, *p;
+    char certfile[PATH_MAX];
+
+    Dl_info info;
+    if (!dladdr(_get_portable_X509_cert_file, &info))
+        return NULL;
+
+    fname = strdup(info.dli_fname);
+
+    /* Get dylib directory: PREFIX/lib */
+    if ((p = strrchr(fname, '/')) == NULL)
+        goto err;
+    *p = '\0';
+
+    /* Get parent directory: PREFIX */
+    if ((p = strrchr(fname, '/')) == NULL)
+        goto err;
+    *p = '\0';
+
+    /* Path to the cert bundle; filename is from the ca-certificates recipe */
+    if (snprintf(certfile, PATH_MAX, "%s/etc/ssl/certs/ca-certificates.crt", fname) < 0)
+        goto err;
+
+    free(fname);
+    return strdup(certfile);
+err:
+    free(fname);
+    return NULL;
+}
+#else
+#define _get_portable_X509_cert_file() NULL
+#endif
+
 static int by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,
                         long argl, char **ret);
 static X509_LOOKUP_METHOD x509_file_lookup = {
@@ -46,11 +89,15 @@ static int by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp,
     switch (cmd) {
     case X509_L_FILE_LOAD:
         if (argl == X509_FILETYPE_DEFAULT) {
+            char *portable_file;
             file = ossl_safe_getenv(X509_get_default_cert_file_env());
+            portable_file = _get_portable_X509_cert_file();
             if (file)
                 ok = (X509_load_cert_crl_file(ctx, file,
                                               X509_FILETYPE_PEM) != 0);
-
+            else if (portable_file)
+                ok = (X509_load_cert_crl_file(ctx, portable_file,
+                                              X509_FILETYPE_PEM) != 0);
             else
                 ok = (X509_load_cert_crl_file
                       (ctx, X509_get_default_cert_file(),
@@ -59,6 +106,7 @@ static int by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp,
             if (!ok) {
                 X509err(X509_F_BY_FILE_CTRL, X509_R_LOADING_DEFAULTS);
             }
+            free (portable_file);
         } else {
             if (argl == X509_FILETYPE_PEM)
                 ok = (X509_load_cert_crl_file(ctx, argp,
-- 
2.31.1

