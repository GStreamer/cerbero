# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
from custom import GStreamer, running_on_cerbero_ci
from cerbero.enums import DistroVersion
from cerbero.errors import FatalError
from cerbero.utils import messages as m
from cerbero.utils import shell, determine_num_cargo_jobs, determine_total_ram
from pathlib import Path

import os
import re
import shutil
import tempfile


class Recipe(recipe.Recipe):
    name = 'gst-plugins-rs'
    version = '0.14.0-alpha.1'
    stype = SourceType.GIT
    remotes = {'origin': 'https://gitlab.freedesktop.org/gstreamer/%(name)s.git'}
    if GStreamer.tagged_for_release:
        commit = f'gstreamer-{GStreamer.version}'
    else:
        commit = 'origin/main'
    # Each plugin uses one or more of these licenses.
    licenses = [{
        License.Apachev2: ['LICENSE-APACHE'],
        License.MIT: ['LICENSE-MIT'],
        License.LGPLv2_1Plus: None,
    }]

    btype = BuildType.CARGO_C
    cargo_packages = [
        'analytics',
        'audiofx',
        'aws',
        'cdg',
        'claxon',
        'closedcaption',
        'dav1d',
        'elevenlabs',
        'fallbackswitch',
        'ffv1',
        'fmp4',
        'gif',
        'gopbuffer',
        'hlsmultivariantsink',
        'hlssink3',
        'hsv',
        'inter',
        'json',
        'vvdec',
        'livesync',
        'lewton',
        'mpegtslive',
        'mp4',
        'ndi',
        'onvif',
        'originalbuffer',
        'quinn',
        'rav1e',
        'regex',
        'reqwest',
        'raptorq',
        'png',
        'rtp',
        'rtsp',
        'streamgrouper',
        'textahead',
        'textwrap',
        'threadshare',
        'togglerecord',
        'tracers',
        'uriplaylistbin',
        'videofx',
        'webrtc',
        'webrtchttp',
    ]

    # If the system has less than 8GB ram or less than 4 cores,
    # block parallelism at both recipe and architectural level.
    if determine_num_cargo_jobs() == 1:
        allow_parallel_build = False
        allow_universal_parallel_build = False
    elif determine_total_ram() <= (64 << 30):
        # gst-plugins-rs has bloated to the point where a 64GB machine OOMs if
        # too many architectures are built in parallel.
        allow_universal_parallel_build = False

    # Needed for openssl
    use_system_libs = True
    deps = ['gstreamer-1.0', 'gst-plugins-base-1.0', 'gst-plugins-bad-1.0']

    def enable_plugin(self, name, category):
        if self.library_type in (LibraryType.SHARED, LibraryType.BOTH):
            attr = f'files_plugins_{category}'
            if not hasattr(self, attr):
                setattr(self, attr, [])
                self.update_categories()
            f = getattr(self, attr)
            f += [f'%(libdir)s/gstreamer-1.0/libgst{name}%(mext)s']
        attr = f'files_plugins_{category}_devel'
        if not hasattr(self, attr):
            setattr(self, attr, [])
        d = getattr(self, attr)
        d.append(f'%(libdir)s/gstreamer-1.0/pkgconfig/gst{name}.pc')
        if self.library_type in (LibraryType.STATIC, LibraryType.BOTH):
            d += [
                f'%(libdir)s/gstreamer-1.0/libgst{name}.a',
                f'%(libdir)s/gstreamer-1.0/libgst{name}.la',
            ]

    def prepare(self):
        if self.config.target_platform in (Platform.IOS, Platform.ANDROID):
            self.library_type = LibraryType.STATIC
        else:
            self.library_type = LibraryType.BOTH

        if self.config.target_platform != Platform.LINUX or self.config.cross_compiling():
            self.deps.append('openssl')

        if 'dav1d' in self.cargo_packages:
            self.deps.append('dav1d')

        if 'onvif' in self.cargo_packages or 'closedcaption' in self.cargo_packages:
            self.deps.append('pango')
            self.deps.append('cairo')

        if 'vvdec' in self.cargo_packages:
            self.deps.append('vvdec')

        plugin_files = {
            'core': [
                'fallbackswitch',
                'gopbuffer',
                'livesync',
                'originalbuffer',
                'rsanalytics',
                'rsinter',
                'rstracers',
                'streamgrouper',
                'threadshare',
                'togglerecord',
            ],
            'net': [
                'aws',
                'elevenlabs',
                'hlssink3',
                'hlsmultivariantsink',
                'mpegtslive',
                'ndi',
                'quinn',
                'rsonvif',
                'raptorq',
                'reqwest',
                'rsrtp',
                'rsrtsp',
                'webrtchttp',
                'rswebrtc',
            ],
            'effects': [
                'rsaudiofx',
                'rsvideofx',
            ],
            'codecs': [
                'cdg',
                'claxon',
                'dav1d',
                'rsclosedcaption',
                'ffv1',
                'fmp4',
                'mp4',
                'gif',
                'hsv',
                'lewton',
                'rav1e',
                'json',
                'rspng',
                'regex',
                'textwrap',
                'textahead',
            ],
            'codecs_restricted': [
                'vvdec',
            ],
            'playback': [
                'uriplaylistbin',
            ],
        }
        for category, names in plugin_files.items():
            for name in names:
                package_name = name if name[0:2] != 'rs' else name[2:]
                if package_name in self.cargo_packages:
                    self.enable_plugin(name, category)

        self.cargo_packages = [f'gst-plugin-{pkg}' for pkg in self.cargo_packages]
        # Build with Cerbero's latest glib version as minimum version
        if 'gst-plugin-gtk4' in self.cargo_packages:
            self.cargo_features += ['glib/v2_74', 'gio/v2_74']
        if 'gst-plugin-rav1e' in self.cargo_packages:
            # Enable assembly optimizations via nasm
            self.cargo_features.append('gst-plugin-rav1e/asm')
        # Build with the current GStreamer version as minimum version
        components = ('', '-app', '-audio', '-base', '-check', '-net', '-pbutils',
                      '-rtp', '-sdp', '-utils', '-video', '-webrtc')
        for each in components:
            self.cargo_features.append(f'gst{each}/v1_22')
        if 'gst-plugin-tracers' in self.cargo_packages:
            self.cargo_features.append('gst-plugin-tracers/v1_22')
        if 'gst-plugin-webrtc' in self.cargo_packages:
            self.cargo_features.append('gst-plugin-webrtc/aws')
            self.cargo_features.append('gst-plugin-webrtc/livekit')

        # The LIBRARY_PATH setting affects all invocations of GCC underneath
        # Cargo, in particular those that link build scripts (that are meant to
        # run on the host machine, not through wine).
        # When creating these, a value for LIBRARY_PATH present will cause
        # cross-mingw GCC to prefer libpthread.a for MinGW-w64 over the system
        # libpthread, and hell breaks loose.
        if self.config.target_platform == Platform.WINDOWS and \
            self.config.platform != self.config.target_platform:
            self.set_env('LDFLAGS')
            self.set_env('LIBRARY_PATH')

        if self.config.platform == Platform.WINDOWS:
            # For bindgen if it's needed
            self.set_env('LIBCLANG_PATH', os.path.join(self.config.build_tools_prefix, 'bin', 'libclang.dll'))
            # For aws-lc-rs -- uses CMake in the background
            if self.using_msvc():
                # MSVC is already set up
                self.set_env('CMAKE_GENERATOR', 'Ninja')
            else:
                bindgen_args = [f'--sysroot={self.config.toolchain_prefix}/x86_64-w64-mingw32/sysroot/usr/{self.config.target}']
                if 'gst-plugin-vvdec' in self.cargo_packages:
                    # Use a header provided by gcc's stdlib to determine
                    # stdbool.h's location
                    include_folders = [f'-I{f.parent.as_posix()}' for f in Path(self.config.toolchain_prefix).glob('**/sha512intrin.h')]
                    bindgen_args.extend(include_folders)
                self.set_env('BINDGEN_EXTRA_CLANG_ARGS', ' '.join(bindgen_args))
        elif self.config.target_platform == Platform.ANDROID:
            # For aws-lc-rs
            self.set_env('ANDROID_NDK_ROOT', self.config.env['ANDROID_NDK_HOME'])
            # https://github.com/rust-lang/cmake-rs/issues/140
            self.set_env("CMAKE_TOOLCHAIN_FILE", f"{self.config_src_dir}/toolchain.cmake")
            self.set_env('BINDGEN_EXTRA_CLANG_ARGS', f'--sysroot={self.config.sysroot}')
            self.set_env('AWS_LC_SYS_EXTERNAL_BINDGEN', '1')
            self.set_env('CMAKE_GENERATOR', 'Ninja')

    async def configure(self):
        # Check that the Cargo.toml version matches the recipe version
        toml_version = self.get_cargo_toml_version()
        if toml_version != self.version and running_on_cerbero_ci():
            msg = f'{self.name} version {self.version} doesn\'t match Cargo.toml version {toml_version}'
            if GStreamer.tagged_for_release:
                raise FatalError(msg)
            else:
                m.warning(msg)
        # For aws-lc-rs/bindgen -- libclang does no introspection when using
        # external compilers to build
        if self.config.target_platform == Platform.ANDROID:
            # For aws-lc-rs
            # https://github.com/rust-lang/cmake-rs/issues/140
            arch = self.config.target_arch
            if self.config.target_arch == Architecture.ARMv7:
                arch = 'armeabi-v7a'
            elif self.config.target_arch == Architecture.ARM64:
                arch = 'arm64-v8a'
            with open(f'{self.config_src_dir}/toolchain.cmake', 'w') as f:
                f.write(f'set(ANDROID_ABI {arch})\n')
                f.write(f'set(ANDROID_PLATFORM android-{DistroVersion.get_android_api_version(self.config.target_distro_version)})\n')
                f.write(f"include({self.config.env['ANDROID_NDK_HOME']}/build/cmake/android.toolchain.cmake)")

        if self.config.target_platform == Platform.WINDOWS and self.library_type != LibraryType.SHARED:
            if 'gst-plugin-webrtc' in self.cargo_packages:
                # Buy some extra space for the MSI
                self.append_config_toml('\n[profile.release.package."gst-plugin-webrtc"]\n'
                                        'opt-level = "s"\n\n'
                                        '[profile.release.package."gst-plugin-aws"]\n'
                                        'opt-level = "s"\n')

        await super().configure()

    def post_install(self):
        # Cargo-C currently can't install pc files into custom dirs, so we need
        # to move these plugin pkgconfig files to the right place.
        for f in self.files_list_by_category(self.DEVEL_CAT, only_existing=False):
            if not f.endswith('.pc') or 'gstreamer-1.0' not in f:
                continue
            name = os.path.basename(f)
            src = os.path.join(self.config.libdir, 'pkgconfig', name)
            dst = os.path.join(self.config.prefix, f)
            if os.path.exists(src):
                shutil.move(src, dst)
        # Cargo-C names MinGW DLLs as foo.dll instead of libfoo.dll
        # https://github.com/lu-zero/cargo-c/issues/280
        # It also follows MSVC convention for static/import libraries
        if self.using_msvc():
            for f in self.files_list_by_category(self.DEVEL_CAT, only_existing=False):
                if not f.endswith('.a'):
                    continue
                dst = Path(self.config.prefix) / f
                src = dst.with_name(f'{dst.stem[3:]}.lib')
                if src.exists():
                    shutil.copy(src, dst)

            # Try single-object prelinking (but with no symbol visibility
            # changing)
            # objcopy (from GNU binutils) is needed but it causes
            # https://github.com/llvm/llvm-project/issues/62182
            libraries = [f for f in self.files_list_by_category(self.DEVEL_CAT, only_existing=False)
                         if f.endswith('.a')]
            for f in libraries:
                source = Path(self.config.prefix) / f

                manifest = shell.check_output(
                    [self.get_llvm_tool("llvm-nm.exe"), "-gjPUA", "--quiet", source.absolute()],
                    env=self.env,
                )

                symbol_pattern = re.compile('gst_plugin_*')

                with tempfile.TemporaryDirectory(prefix='cerbero', dir=self.config.home_dir) as tmp:
                    # List those symbols that will be kept
                    symbols_to_keep = set()

                    for line in manifest.splitlines():
                        data = line.split(sep=" ")
                        symbol = data[1]

                        if symbol_pattern.match(symbol):
                            symbols_to_keep.add(symbol)

                    ar = self.get_llvm_tool("llvm-ar.exe")
                    m.log(f"Unpacking {source.absolute()} with ar", self.logfile)
                    shell.new_call(
                        [ar, 'xv', source.absolute()], cmd_dir=tmp, logfile=self.logfile)

                    # Now everything is flat in the pwd
                    m.log("Performing Single-Object Prelinking", self.logfile)
                    prelinked_obj = (
                        Path(tmp) / source.name).with_suffix('.prelinked.o')

                    # lld doesn't support this, their drivers are per-OS
                    ld = shutil.which("ld.bfd.exe")

                    if ld is None:
                        raise FatalError('ld.bfd not found')

                    rsp = (
                        Path(tmp) / source.name).with_suffix('.rsp')

                    with rsp.open('w', encoding='utf-8') as f:
                        files = set(str(f.relative_to(tmp)) for f in Path(tmp).glob('*.o'))

                        flags = ['--relocatable']
                        if self.config.target_arch == Architecture.X86:
                            flags.extend(['-m', 'i386pe'])
                        flags.extend(f'--export-dynamic-symbol={i}' for i in symbols_to_keep)
                        flags.extend(['-o', prelinked_obj.name])
                        flags.extend(files)

                        f.write(' '.join(flags))

                    shell.new_call(
                        [
                            ld,
                            f"@{rsp.name}"
                        ],
                        cmd_dir=tmp,
                        logfile=self.logfile,
                    )

                    dest = Path(tmp) / source.name
                    m.log(f"Repacking library to {dest.absolute()}", self.logfile)

                    shell.new_call(
                        [
                            ar,
                            'rs',
                            dest.absolute(),
                            prelinked_obj.absolute()
                        ],
                        cmd_dir=tmp,
                        logfile=self.logfile
                    )

                    # And now we paper over
                    backup_source = source.absolute().with_suffix('.original.a')
                    backup_source.unlink(missing_ok=True)
                    source.rename(backup_source)
                    os.replace(dest.absolute(), source.absolute())
        else:
            for f in self.dist_files_list(only_existing=False):
                if not f.endswith('.dll'):
                    continue
                name = os.path.basename(f)
                d = os.path.dirname(f)
                src = os.path.join(self.config.prefix, d, f'{name[3:]}')
                dst = os.path.join(self.config.prefix, f)
                if os.path.exists(src):
                    shutil.copy(src, dst)
                # if there's a .dll.a it also needs renaming
                if os.path.exists(src + '.a'):
                    shutil.copy(src + '.a', dst + '.a')
            libraries = [f for f in self.devel_files_list(only_existing=False)
                         if f.endswith('.a')]
            for f in libraries:
                if self.config.target_platform in (Platform.IOS, Platform.DARWIN):
                    # Apple wants you to do Single-Object Prelink
                    source = Path(self.config.prefix) / f

                    # Only global symbols
                    # Only symbol names
                    # Use portable output format
                    # Skip undefined symbols
                    # Write pathname of the object file
                    manifest = shell.check_output(
                        [self.get_llvm_tool("llvm-nm"), "-gjPUA", "--quiet", source.absolute()],
                        env=self.env,
                    )

                    # Now we need to match the symbols to the pattern

                    # Here's the catch: Apple strip is silly enough to be unable to
                    # -undefined suppress a .o because of the -two_level_namespace being
                    # the default post-10.1. So we need to determine which objects have
                    # matching symbols. The rest can be safely stripped.

                    # The symbol listing format is as follows:
                    #  ./libgstrswebrtc.a[gstrswebrtc-3a8116aacab254c2.2u9b7sba8k2fvc9v.rcgu.o]: _gst_plugin_rswebrtc_get_desc T 500 0
                    # Field 1 has the object name between brackets.
                    # Field 2 is the symbol name.
                    symbol_pattern = re.compile('_gst_plugin_*')

                    with tempfile.TemporaryDirectory(prefix='cerbero', dir=self.config.home_dir) as tmp:
                        # List those symbols that will be kept
                        symbols_to_keep = set()

                        for line in manifest.splitlines():
                            data = line.split(sep=" ")
                            symbol = data[1]

                            if symbol_pattern.match(symbol):
                                symbols_to_keep.add(symbol)

                        module = (
                            Path(tmp) / source.name).with_suffix('.symbols')

                        with module.open('w', encoding='utf-8') as f:
                            f.write('# Stripped by Cerbero\n')

                            for symbol in symbols_to_keep:
                                f.write(f'{symbol}\n')

                        m.log(
                            f"Symbols to preserve in {source.absolute()}:", self.logfile
                        )
                        for symbol in symbols_to_keep:
                            m.log(f"\t{symbol}", self.logfile)

                        # Unpack archive
                        m.log(f"Unpacking {source.absolute()} with ar", self.logfile)
                        shell.new_call(
                            [shutil.which('ar'), 'xv', source.absolute()], cmd_dir=tmp, logfile=self.logfile)

                        # Now everything is flat in the pwd
                        m.log("Performing Single-Object Prelinking", self.logfile)
                        prelinked_obj = (
                            Path(tmp) / source.name).with_suffix('.prelinked.o')

                        ld = shutil.which("ld")

                        if ld is None:
                            raise FatalError(f'ld not found')

                        # DO NOT split this into an array unless
                        # you wrap this into a 'sh -c' call.
                        # It needs the glob to be parsed by the shell!
                        shell.new_call(
                            ' '.join([
                                ld,
                                "-r",
                                "-exported_symbols_list",
                                str(module.absolute()),
                                "-o",
                                str(prelinked_obj.absolute()),
                                "*.o",
                            ]),
                            cmd_dir=tmp,
                            logfile=self.logfile,
                        )

                        # With the stripping done, all files now need to be rearchived
                        dest = Path(tmp) / source.name
                        m.log(f"Repacking library to {dest.absolute()}", self.logfile)

                        libtool = shutil.which("libtool")

                        if libtool is None:
                            raise FatalError(f'libtool not found')

                        shell.new_call([
                                libtool,
                                "-static",
                                prelinked_obj.absolute(),
                                "-o",
                                dest.absolute(),
                            ],
                            cmd_dir=tmp,
                            logfile=self.logfile,
                        )

                        # And now we paper over
                        os.replace(dest.absolute(), source.absolute())
                elif self.config.target_platform in (Platform.LINUX, Platform.ANDROID):
                    # This is a very similar approach, however Clang
                    # will itself do a really bad job if one supplies
                    # a LD version script -- that'll suppress 99% of
                    # the things needed for a working .o file.
                    # The result, just like using
                    # `strip --wildcard --keep-symbol=gst_plugin_*`,
                    # is a .o that has all the symbols you want, but
                    # placeholders/duds/broken references for all unfortunate
                    # .rodata symbols referenced in the exported functions.
                    #
                    # See https://maskray.me/blog/2022-11-21-relocatable-linking
                    source = Path(self.config.prefix) / f

                    with tempfile.TemporaryDirectory(prefix='cerbero', dir=self.config.home_dir) as tmp:
                        # Unpack archive
                        m.log(f"Unpacking {source.absolute()} with ar", self.logfile)
                        if self.config.target_platform == Platform.ANDROID:
                            ar = shutil.which('llvm-ar',
                                                path=self.config.env['ANDROID_NDK_TOOLCHAIN_BIN'])
                        else:
                            ar = shutil.which('llvm-ar')
                            if not ar:
                                ar = shutil.which('ar')
                        if ar is None:
                            raise FatalError('ar not found')
                        shell.new_call(
                            [ar, 'xv', source.absolute()], cmd_dir=tmp, logfile=self.logfile)

                        # Now everything is flat in the pwd
                        m.log("Performing Single-Object Prelinking", self.logfile)
                        prelinked_obj = (
                            Path(tmp) / source.name).with_suffix('.prelinked.o')

                        if self.config.target_platform == Platform.ANDROID:
                            ld = shutil.which("ld.lld",
                                                path=self.config.env['ANDROID_NDK_TOOLCHAIN_BIN'])
                        else:
                            ld = shutil.which('ld')
                        if ld is None:
                            raise FatalError('ld not found')

                        # DO NOT split this into an array unless
                        # you wrap this into a 'sh -c' call.
                        # It needs the glob to be parsed by the shell!
                        export_flag = (
                            "--export-dynamic-symbol=gst_plugin_*"
                            if '--export-dynamic-symbol' in shell.check_output(['ld', '--help'])
                            else "--export-dynamic"
                        )

                        shell.new_call(
                            ' '.join([
                                ld,
                                "--relocatable",
                                export_flag,
                                "-o",
                                str(prelinked_obj.absolute()),
                                "*.o",
                            ]),
                            cmd_dir=tmp,
                            logfile=self.logfile,
                        )

                        # WE ARE NOT DONE! ld.lld merged all the files,
                        # stripping those not referenced in the dynamic symbol
                        # glob, but we still need to hide all the Rust cruft.
                        if self.config.target_platform == Platform.ANDROID:
                            objcopy = shutil.which("llvm-objcopy",
                                                path=self.config.env['ANDROID_NDK_TOOLCHAIN_BIN'])
                        else:
                            objcopy = shutil.which("llvm-objcopy")
                            if objcopy is None:
                                objcopy = shutil.which("objcopy")
                        if objcopy is None:
                            raise FatalError('objcopy not found')
                        shell.new_call(
                            [
                                objcopy,
                                "--wildcard",
                                "--keep-global-symbol=gst_plugin_*",
                                prelinked_obj.absolute(),
                            ],
                            cmd_dir=tmp,
                            logfile=self.logfile,
                        )

                        # With the stripping (really) done, all files now need to be rearchived
                        dest = Path(tmp) / source.name
                        m.log(f"Repacking library to {dest.absolute()}", self.logfile)

                        shell.new_call(
                            [
                                ar,
                                'rs',
                                dest.absolute(),
                                prelinked_obj.absolute()
                            ],
                            cmd_dir=tmp,
                            logfile=self.logfile
                        )

                        # And now we paper over
                        os.replace(dest.absolute(), source.absolute())

        super().post_install()
