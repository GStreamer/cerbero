# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python

from pathlib import Path
import shlex
import tempfile

from cerbero.utils import shell

class Recipe(recipe.Recipe):
    name = 'bindgen-cli'
    version = '0.72.0'
    stype = SourceType.TARBALL
    btype = BuildType.CARGO
    # url = 'https://github.com/rust-lang/rust-bindgen/releases/download/v%(version)s/source.tar.gz'
    tarball_checksum = '1da7050a17fdab0e20d5d8c20d48cddce2973e8b7cb0afc15185bfad22f8ce5b'
    # tarball_dirname = '%(name)s-%(version)s'

    # This release was done as-is, no official source tarball
    url = 'https://github.com/rust-lang/rust-bindgen/archive/refs/tags/v%(version)s.tar.gz'
    tarball_dirname = 'rust-bindgen-%(version)s'

    # The bindgen repo is a workspace for both bindgen (the crate)
    # and bindgen-cli (the CLI), we need only the CLI
    workspace_member = 'bindgen-cli'

    files_bins = ['bindgen']

    def prepare(self):
        if self.config.platform == Platform.WINDOWS:
            self.deps.append('libclang')
            self.set_env('LIBCLANG_PATH', os.path.join(self.config.build_tools_prefix, 'bin', 'libclang.dll'))

    async def configure(self):
        if self.config.platform == Platform.DARWIN: 
            link_args = []
            # We need to extract necessary linker flags from LDFLAGS which is
            # passed to the compiler
            for arg in shlex.split(self.get_env('RUSTC_LDFLAGS', self.get_env('LDFLAGS'))):
                link_args += ['-C', f"link-arg={arg}"]
            s = f'[target.{self.target_triple}]\n' \
                f'rustflags = {link_args!r}\n'
            self.append_config_toml(s)

        await super().configure()

    def post_install(self):
        bin = os.path.join(self.config.build_tools_prefix, 'bin', 'bindgen')
        with tempfile.TemporaryDirectory() as tmp:
            demo_header = Path(tmp) / 'foo.h'
            with demo_header.open('w', encoding='utf-8') as f:
                f.write('#include <stdio.h>\n#include <stdint.h>\n\nint32_t foo(int32_t bar);\n')
            shell.new_call([bin, demo_header], cmd_dir=tmp, logfile=self.logfile, env=self.env)
        super().post_install()
