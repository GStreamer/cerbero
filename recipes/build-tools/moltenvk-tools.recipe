# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
import shutil
from cerbero.utils import shell
from cerbero.utils import messages as m

class Recipe(recipe.Recipe):
    name = 'moltenvk-tools'
    version = '1.3.283.0'
    licenses = [License.Apachev2]
    stype = SourceType.TARBALL
    tarball_dirname = "vulkansdk-macos-%(version)s"
    # Mirrored because lunarg.com has an extremely small download limit
    #url = 'https://sdk.lunarg.com/sdk/download/%(version)s/mac/' + tarball_dirname + '.dmg'
    url = 'https://gstreamer.freedesktop.org/data/src/mirror/' + tarball_dirname + '.dmg'
    tarball_checksum = '60ca47ad5a84a890087e7b372b5b2352bbced07966767dd30159efd49d0f7118'
    btype = BuildType.CUSTOM
    # The binaries from the SDK are already signed and do not require relocation
    skip_steps = [BuildSteps.RELOCATE_OSX_LIBRARIES, BuildSteps.CODE_SIGN]

    files_bins = [
        'glslangValidator',
        'glslc',
        'spirv-as',
        'spirv-cfg',
        'spirv-cross',
        'spirv-dis',
        'spirv-link',
        'spirv-opt',
        'spirv-reduce',
        'spirv-remap',
        'spirv-val',
    ]

    def prepare(self):
        if self.config.target_platform not in (Platform.IOS, Platform.DARWIN):
            raise InvalidRecipeError(self, "Invalid platform")

    async def install(self):
        srcdir = self.config.moltenvk_prefix
        prefix = self.config.prefix

        if os.path.exists(srcdir):
            shutil.rmtree(srcdir)
        # https://vulkan.lunarg.com/doc/sdk/1.3.283.0/mac/getting_started.html
        vulkan_installer = os.path.join(self.build_dir, 'InstallVulkan.app/Contents/MacOS/InstallVulkan')
        await shell.async_call([vulkan_installer,
            '--root', self.config.moltenvk_prefix,
            '--accept-licenses',
            '--default-answer',
            '--confirm-command',
            'install',
            'copy_only=1'],
            env=self.env, logfile=self.logfile)

        for bin in self.files_bins:
            shutil.copy(os.path.join(srcdir, 'macOS', 'bin', bin), os.path.join(prefix, 'bin', bin))

        patch = os.path.join(self.config.recipes_dir, 'build-tools',
                             self.name, 'ifdef-new-metal-types.patch')
        moltenvk_dir = os.path.join(self.config.moltenvk_prefix, 'macOS')
        shell.apply_patch(patch, moltenvk_dir, logfile=self.logfile)
