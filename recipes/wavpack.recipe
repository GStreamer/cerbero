# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
from pathlib import Path
from cerbero.tools.libtool import LibtoolLibrary

class Recipe(recipe.Recipe):
    name = 'wavpack'
    version = '5.8.1'
    stype = SourceType.TARBALL
    url = 'https://www.wavpack.com/wavpack-%(version)s.tar.xz'
    tarball_checksum = '7322775498602c8850afcfc1ae38f99df4cbcd51386e873d6b0f8047e55c0c26'
    licenses = [{License.BSD_like: ['COPYING']}]
    library_type = LibraryType.STATIC
    btype = BuildType.CMAKE
    configure_options = '-DWAVPACK_INSTALL_CMAKE_MODULE=OFF \
        -DWAVPACK_INSTALL_PKGCONFIG_MODULE=ON \
        -DWAVPACK_INSTALL_DOCS=OFF \
        -DWAVPACK_BUILD_DOCS=OFF \
        -DWAVPACK_BUILD_PROGRAMS=OFF \
        -DWAVPACK_BUILD_COOLEDIT_PLUGIN=OFF \
        -DWAVPACK_BUILD_WINAMP_PLUGIN=OFF'
    can_msvc = True
    cmake_generator = 'ninja'

    patches = [
        f'{name}/0001-cmake-Don-t-name-MSVC-DLL-wavpackdll.dll.patch',
        f'{name}/0002-cmake-Set-SOVERSION-to-match-Autotools.patch',
    ]

    files_libs = ['libwavpack']
    files_devel = ['include/wavpack', '%(libdir)s/pkgconfig/wavpack.pc']

    def prepare(self):
        if self.config.target_arch == Architecture.ARM64 or self.config.target_platform == Platform.IOS:
            self.configure_options += ' -DWAVPACK_ENABLE_ASM=OFF '
        # We only want static libs on iOS and Android
        if not Platform.is_mobile(self.config.target_platform):
            self.configure_options += ' -DBUILD_SHARED_LIBS=ON '
            self.library_type = LibraryType.SHARED
        if self.config.cross_compiling() and self.config.target_platform not in [Platform.WINDOWS, Platform.DARWIN]:
            self.configure_options += ' -DCOMPILER_SUPPORTS_SYMBOL_MAPS_EXITCODE=0'
        if self.config.target_platform == Platform.ANDROID:
            self.configure_options += ' -DCOMPILER_SUPPORTS_SYMBOL_MAPS=TRUE'
        if self.config.target_arch == Architecture.X86 and self.config.variants.mingw:
            self.append_env('ASMFLAGS', '-m32')

    def post_install(self):
        deps = ['-lm']
        if self.config.target_platform == Platform.ANDROID:
            # Meson prefers shared lib lookup always
            shell.replace(f'{self.config.libdir}/pkgconfig/wavpack.pc',
                              {' -lwavpack': ' -lwavpack -lm'})
        libtool_la = LibtoolLibrary('wavpack', None, None, None, self.config.libdir,
                self.config.target_platform, deps)
        libtool_la.save()
        super().post_install()
