From 2ddf0ecb4bc28c200bd0c6845314e91da793e24c Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@centricular.com>
Date: Tue, 10 Dec 2024 21:06:00 -0300
Subject: [PATCH] Add Meson build

---
 .gitignore          |   6 ++
 include/meson.build |  18 ++++
 meson.build         | 109 +++++++++++++++++++++++
 meson/makedef.py    | 188 ++++++++++++++++++++++++++++++++++++++++
 meson_options.txt   |   1 +
 zbar/meson.build    | 206 ++++++++++++++++++++++++++++++++++++++++++++
 zbar/processor.h    |   2 +
 7 files changed, 530 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 include/meson.build
 create mode 100644 meson.build
 create mode 100755 meson/makedef.py
 create mode 100644 meson_options.txt
 create mode 100644 zbar/meson.build

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..be8622b
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,6 @@
+*.*~
+*~
+autom4te.cache
+.cache
+build
+b
diff --git a/include/meson.build b/include/meson.build
new file mode 100644
index 0000000..408c32e
--- /dev/null
+++ b/include/meson.build
@@ -0,0 +1,18 @@
+c_headers = files(
+	'zbar.h',
+)
+
+cpp_headers = files(
+	'zbar/Scanner.h',
+	'zbar/Decoder.h',
+	'zbar/Exception.h',
+	'zbar/Symbol.h',
+	'zbar/Image.h',
+	'zbar/ImageScanner.h',
+	'zbar/Video.h',
+	'zbar/Window.h',
+	'zbar/Processor.h',
+)
+
+install_headers(c_headers)
+install_headers(cpp_headers, subdir: 'zbar')
diff --git a/meson.build b/meson.build
new file mode 100644
index 0000000..5d9ac04
--- /dev/null
+++ b/meson.build
@@ -0,0 +1,109 @@
+project('zbar', 'c',
+	license: 'LGPL-2.1-or-later',
+	version: '0.23.93',
+	meson_version: '>= 1.3.0',
+	default_options: [
+		'warning_level=1',
+		'c_std=gnu11,c11',
+		# 'pkgconfig.relocatable=true' # https://github.com/mesonbuild/meson/issues/13847
+	]
+)
+
+conf = configuration_data()
+version = meson.project_version().split('.')
+lib_version = '3:0:3'.split(':')
+
+conf.set_quoted('PACKAGE_VERSION', meson.project_version())
+
+conf.set('ZBAR_VERSION_MAJOR', version[0].to_int())
+conf.set('ZBAR_VERSION_MINOR', version[1].to_int())
+conf.set('ZBAR_VERSION_PATCH', version[2].to_int())
+
+conf.set('LIB_VERSION_MAJOR', lib_version[0].to_int() - lib_version[2].to_int())
+conf.set('LIB_VERSION_MINOR', lib_version[2].to_int())
+conf.set('LIB_VERSION_REVISION', lib_version[1].to_int())
+
+include_dirs = [
+	include_directories('include'),
+	include_directories('.'),
+]
+
+cc = meson.get_compiler('c')
+
+c_args = cc.get_supported_arguments('-Wno-parentheses')
+
+py = import('python')
+python = py.find_installation()
+
+makedef = find_program('meson/makedef.py', native: true)
+
+host_system = host_machine.system()
+win32 = host_system in ['windows', 'cygwin']
+
+headers = 'errno.h fcntl.h features.h inttypes.h float.h limits.h locale.h stddef.h stdlib.h string.h unistd.h sys/types.h sys/stat.h sys/ioctl.h sys/time.h sys/times.h sys/ipc.h sys/shm.h sys/mman.h'
+
+if win32
+	headers += ' arpa/inet.h malloc.h mntent.h netdb.h netinet/in.h shadow.h sys/file.h sys/mount.h sys/param.h sys/socket.h sys/statfs.h sys/statvfs.h sys/vfs.h unistd.h values.h'
+endif
+
+foreach h: headers.split(' ')
+	k = 'HAVE_@0@'.format(h.underscorify().to_upper())
+	v = cc.has_header(h)
+	conf.set(k, v)
+endforeach
+
+codes = get_option('codes')
+foreach k: codes
+	conf.set10('ENABLE_@0@'.format(k.to_upper()), true)
+endforeach
+
+chk_code = {
+	'databar': 'DataBar symbology',
+	'code128': 'Code 128 symbology',
+	'code93': 'Code 93 symbology',
+	'code39': 'Code 39 symbology',
+	'codabar': 'Codabar symbology',
+	'i25': 'Interleaved 2 of 5 symbology',
+	'qrcode': 'QR Code',
+	'sqcode': 'SQ Code',
+	'pdf417': 'PDF417 symbology (incomplete)',
+}
+
+summary_codes = {}
+
+foreach k, v: chk_code
+	summary_codes += {v: conf.get('ENABLE_@0@'.format(k.to_upper()), 0) == 1}
+endforeach
+
+deps = []
+
+librt = cc.find_library('rt', required: false)
+threads = dependency('threads')
+if cc.has_function('clock_gettime')
+	# nothing
+	conf.set10('HAVE_CLOCK_GETTIME', true)
+elif cc.has_function('clock_gettime', dependencies: librt)
+	deps += librt
+	conf.set10('HAVE_CLOCK_GETTIME', true)
+elif cc.has_function('clock_gettime', dependencies: threads)
+	deps += threads
+	conf.set10('HAVE_CLOCK_GETTIME', true)
+endif
+
+deps += dependency('iconv', required: conf.get('ENABLE_QRCODE', 0) == 1)
+
+conf.set('HAVE_POLL_H', cc.has_header('poll.h'))
+if cc.has_function('pthread_create', dependencies: threads)
+	conf.set('HAVE_LIBPTHREAD', true)
+	deps += threads
+endif
+
+config_h = configure_file(
+	output: 'config.h',
+	configuration: conf,
+)
+
+subdir('include')
+subdir('zbar')
+
+summary(summary_codes)
diff --git a/meson/makedef.py b/meson/makedef.py
new file mode 100755
index 0000000..2f457d0
--- /dev/null
+++ b/meson/makedef.py
@@ -0,0 +1,193 @@
+#!/usr/bin/env python3
+# Copyright (c) 2022 L. E. Segovia <amy@amyspark.me>
+#
+# This file is part of the FFmpeg Meson build
+#
+# This library is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, see <http://www.gnu.org/licenses/>.
+
+import argparse
+import errno
+import os
+import pathlib
+import re
+import subprocess
+
+
+def output(platform, symbols):
+    if platform == 'win':
+        print("EXPORTS")
+        print(*[f'    {symbol}' for symbol in sorted(set(symbols))], sep='\n')
+    elif platform == 'darwin':
+        print(*[f'{prefix}{symbol}' for symbol in sorted(set(symbols))], sep='\n')
+    else:
+        print('{')
+        print('    global:')
+        print(
+            *[f'        {prefix}{symbol};' for symbol in sorted(set(symbols))], sep='\n')
+        print('    local:')
+        print('        *;')
+        print('};')
+
+
+if __name__ == '__main__':
+    arg_parser = argparse.ArgumentParser(
+        description='Craft the symbols exports file')
+
+    arg_parser.add_argument('--prefix', metavar='PREFIX',
+                            help='Prefix for extern symbols')
+    g = arg_parser.add_argument_group('Library parsing tool')
+    group = g.add_mutually_exclusive_group(required=True)
+    group.add_argument('--nm', metavar='NM_PATH', type=pathlib.Path,
+                       help='If specified, runs this instead of dumpbin (MinGW)')
+    group.add_argument('--dumpbin', metavar='DUMPBIN_PATH', type=pathlib.Path,
+                       help='If specified, runs this instead of nm (MSVC)')
+    group.add_argument(
+        '--list', action='store_true', help='If specified, consider FILE as an exported symbols list instead of a library')
+    g = arg_parser.add_argument_group('Symbol naming')
+    group = g.add_mutually_exclusive_group(required=True)
+    group.add_argument('--regex', metavar='REGEX', type=str,
+                       nargs='+',
+                       help='Regular expression for exported symbols')
+    group.add_argument('--vscript', metavar='VERSION_SCRIPT',
+                       type=argparse.FileType('r'), help='Version script')
+    arg_parser.add_argument('--os', type=str, choices=('win', 'linux', 'darwin'),
+                            default='linux', required=True,
+                            help='Target operating system for the exports file (win = MSVC module definition file, linux = version script, darwin = exported symbols list)')
+    arg_parser.add_argument('libnames', metavar='FILE', type=pathlib.Path,
+                            nargs='+',
+                            help='Source file(s) to parse')
+
+    args = arg_parser.parse_args()
+
+    libnames = args.libnames
+
+    for libname in libnames:
+        if not libname.exists():
+            raise FileNotFoundError(
+                errno.ENOENT, os.strerror(errno.ENOENT), libname)
+
+    if not args.list and len(libnames) > 1:
+        raise ValueError("Expect 1 filename as argument.")
+
+    prefix = args.prefix or ''
+    started = 0
+    regex = []
+
+    if args.vscript:
+        for line in args.vscript:
+            # We only care about global symbols
+            if re.match(r'^\s+global:', line):
+                started = 1
+                line = re.sub(r'^\s+global: *', '', line)
+            else:
+                if re.match(r'^\s+local:', line):
+                    started = 0
+
+            if started == 0:
+                continue
+
+            line = line.replace(';', '')
+
+            for exp in line.split():
+                # Remove leading and trailing whitespace
+                regex.append(exp.strip())
+    else:
+        regex.extend(args.regex)
+
+    # Ensure things are compatible on Windows with Python 3.7.x
+    libname_path_posix = pathlib.Path(libnames[0]).as_posix()
+
+    if args.list:
+        dump = []
+        for libname in libnames:
+            syms = libname.open('r', encoding='utf-8').readlines()
+            # Strip whitespaces
+            syms = [x.strip() for x in syms]
+            # Exclude blank lines
+            syms = [x for x in syms if len(x) > 0]
+            dump.extend(syms)
+    elif args.nm is not None:
+        # Use eval, since NM="nm -g"
+        # Add -j to ensure only symbol names are output (otherwise in macOS
+        # a race condition can occur in the redirection)
+        # And use `--no-llvm-bc` in case it's /usr/bin/nm on macOS
+        s = subprocess.run(
+            [args.nm, '-U', '-g', '-j', '--no-llvm-bc', libname_path_posix],
+            stdout=subprocess.PIPE,
+            stderr=subprocess.STDOUT,
+            universal_newlines=True,
+            check=False,
+        )
+        if s.returncode != 0:
+            # If it fails, retry without skipping LLVM bitcode (macOS flag)
+            # Don't use -U, as that was an alias for --unicode= instead of
+            # --defined-only before Binutils 2.39
+            s = subprocess.run(
+                [args.nm, '--defined-only', '-g', '-j', libname_path_posix],
+                stdout=subprocess.PIPE,
+                stderr=subprocess.STDOUT,
+                universal_newlines=True,
+                check=False,
+            )
+        if s.returncode == 0:
+            dump = s.stdout.splitlines()
+        else:
+            # -j was added only in Binutils 2.37
+            s = subprocess.run(
+                [args.nm, '--defined-only', '-g', libname_path_posix],
+                stdout=subprocess.PIPE,
+                stderr=subprocess.DEVNULL,
+                universal_newlines=True,
+                check=True,
+            )
+            dump = s.stdout.splitlines()
+            # keep only symbol (as -j does)
+            dump =  [x.split(" ")[-1] for x in dump if ":" not in x]
+
+        # Exclude lines with ':' (object name)
+        dump = [x for x in dump if ":" not in x]
+        # Exclude blank lines
+        dump = [x for x in dump if len(x) > 0]
+        # Subst the prefix out
+        dump = [re.sub(f'^{prefix}', '', x) for x in dump]
+    else:
+        dump = subprocess.run([pathlib.Path(args.dumpbin).as_posix(), '-linkermember:1', libname_path_posix],
+                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True).stdout.splitlines()
+        # Find the index of the first line with
+        # "public symbols", keep the rest
+        # Then the line with " Summary",
+        # delete it and the rest
+        for i, line in enumerate(dump):
+            if 'public symbols' in line:
+                start = i
+            elif re.match(r'\s+Summary', line):
+                end = i
+        dump = dump[start:end]
+        # Substitute prefix out
+        dump = [re.sub(fr'\s+{prefix}', ' ', x) for x in dump]
+        # Substitute big chonky spaces out
+        dump = [re.sub(r'\s+', ' ', x) for x in dump]
+        # Exclude blank lines
+        dump = [x for x in dump if len(x) > 0]
+        # Take only the *second* field (split by spaces)
+        # Python's split excludes whitespace at the beginning
+        dump = [x.split()[1] for x in dump]
+
+    symbols = []
+    for exp in regex:
+        for i in dump:
+            if re.match(exp, i):
+                symbols.append(i)
+
+    output(args.os, symbols)
diff --git a/meson_options.txt b/meson_options.txt
new file mode 100644
index 0000000..b1164be
--- /dev/null
+++ b/meson_options.txt
@@ -0,0 +1 @@
+option('codes', type: 'array', choices: ['ean', 'databar', 'code128', 'code93', 'code39', 'codabar', 'i25', 'qrcode', 'sqcode'], value: ['ean', 'databar', 'code128', 'code93', 'code39', 'codabar', 'i25', 'qrcode', 'sqcode'], description: 'select symbologies to compile')
diff --git a/zbar/meson.build b/zbar/meson.build
new file mode 100644
index 0000000..ccbfca4
--- /dev/null
+++ b/zbar/meson.build
@@ -0,0 +1,206 @@
+libzbar_sources = files(
+	'debug.h',
+	'config.c',
+	'error.h',
+	'error.c',
+	'symbol.h',
+	'symbol.c',
+	'image.h',
+	'image.c',
+	'convert.c',
+	'processor.c',
+	'processor.h',
+	'processor/lock.c',
+	'refcnt.h',
+	'refcnt.c',
+	'timer.h',
+	'mutex.h',
+	'event.h',
+	'thread.h',
+	'window.h',
+	'window.c',
+	'video.h',
+	'video.c',
+	'img_scanner.h',
+	'img_scanner.c',
+	'scanner.c',
+	'decoder.h',
+	'decoder.c',
+	'misc.h',
+	'misc.c',
+	'svg.h',
+	# The following requires DEBUG_SVG enabled
+	# 'svg.c',
+)
+
+extra_sources = {
+	'ENABLE_EAN': files('decoder/ean.h', 'decoder/ean.c'),
+	'ENABLE_DATABAR': files('decoder/databar.h', 'decoder/databar.c'),
+	'ENABLE_CODE128': files('decoder/code128.h', 'decoder/code128.c'),
+	'ENABLE_CODE93': files('decoder/code93.h', 'decoder/code93.c'),
+	'ENABLE_CODE39': files('decoder/code39.h', 'decoder/code39.c'),
+	'ENABLE_CODABAR': files('decoder/codabar.h', 'decoder/codabar.c'),
+	'ENABLE_I25': files('decoder/i25.h', 'decoder/i25.c'),
+	'ENABLE_PDF417': files('decoder/pdf417.h', 'decoder/pdf417.c', 'decoder/pdf417_hash.h'),
+	'ENABLE_QRCODE': files('qrcode.h', 'decoder/qr_finder.h', 'decoder/qr_finder.c', 'qrcode/qrdec.h', 'qrcode/qrdec.c', 'qrcode/qrdectxt.c', 'qrcode/rs.h', 'qrcode/rs.c', 'qrcode/isaac.h', 'qrcode/isaac.c', 'qrcode/bch15_5.h', 'qrcode/bch15_5.c', 'qrcode/binarize.h', 'qrcode/binarize.c', 'qrcode/util.h', 'qrcode/util.c'),
+	'ENABLE_SQCODE': files('sqcode.h', 'sqcode.c', 'decoder/sq_finder.h', 'decoder/sq_finder.c'),
+}
+
+foreach k, v: extra_sources
+	if conf.get(k, 0) == 1
+		libzbar_sources += v
+	endif
+endforeach
+
+if win32
+	windows = import('windows')
+	libzbar_sources += files('processor/win.c')
+	libzbar_sources += windows.compile_resources(
+		'libzbar.rc',
+		depend_files: config_h,
+		include_directories: include_dirs,
+	)
+else
+	libzbar_sources += files('processor/posix.h', 'processor/posix.c')
+endif
+
+if conf.get('HAVE_VIDEO', 0) != 1
+	libzbar_sources += files('video/null.c')
+endif
+
+if win32
+	libzbar_sources += files(
+		'window/win.h',
+		'window/win.c',
+		'window/dib.c',
+		# 'window/vfw.c',
+	)
+	deps += [
+		cc.find_library('gdi32'),
+		cc.find_library('winmm'),
+		# cc.find_library('vfw32')
+	]
+else
+	libzbar_sources += files('processor/null.c', 'window/null.c')
+endif
+
+makedef_args = [
+  makedef,
+  '--regex',
+  '^(zbar|_zbar.*_error)_.*',
+]
+
+if host_system in ['darwin', 'ios']
+  makedef_args += ['--os', 'darwin']
+  makedef_extension = 'sym'
+elif host_system in ['windows', 'cygwin']
+  makedef_args += ['--os', 'win']
+  makedef_extension = 'def'
+else
+  makedef_args += ['--os', 'linux']
+  makedef_extension = 'ver'
+endif
+
+if cc.symbols_have_underscore_prefix()
+  makedef_args += ['--prefix', '_']
+else
+  makedef_args += ['--prefix', '']
+endif
+
+makedef_tool_args = []
+
+# Ideally, cc.get_argument_syntax() == 'msvc' should
+# cover this, but 'clang' can mean GCC or MSVC-style
+# depending on the env and/or flags on Windows
+if cc.get_argument_syntax() == 'msvc' or cc.get_define('_MSC_VER') != ''
+  dumpbin = find_program('dumpbin')
+  makedef_tool_args += ['--dumpbin', dumpbin]
+else
+  nm = find_program('llvm-nm', required: false)
+  if not nm.found()
+	if host_system in ['darwin', 'ios']
+	  warning('llvm-nm not found, you may experience problems when creating the shared libzbar.')
+	  warning('Please install the llvm-tools component through rustup, or point Meson to an existing LLVM installation.')
+	endif
+	nm = find_program('nm')
+  endif
+  makedef_tool_args += ['--nm', nm]
+endif
+
+libzbar_static = static_library('zbar',
+	libzbar_sources,
+	c_args: c_args,
+	dependencies: deps,
+	include_directories: include_dirs,
+	install: get_option('default_library') in ['static', 'both'],
+)
+
+zbar_def_name = '@0@.@1@'.format(meson.project_name(), makedef_extension)
+zbar_def = custom_target(
+	zbar_def_name,
+	command: [makedef_args, makedef_tool_args, '@INPUT@'],
+	input: libzbar_static,
+	output: zbar_def_name,
+	capture: true,
+)
+
+version_script = meson.current_build_dir() / zbar_def_name
+
+if host_system in ['darwin', 'ios']
+	vflag = ['-Wl,-exported_symbols_list,@0@'.format(version_script)]
+elif not win32
+	vflag = ['-Wl,--version-script,@0@'.format(version_script)]
+else
+	vflag = []
+endif
+
+# Some systems, reportedly OpenBSD and macOS, refuse
+# to create libraries without any object files. Compiling
+# this file, and adding its object file to the library,
+# will prevent the library from being empty.
+if cc.has_function_attribute('unused')
+	zbar_dummy = configure_file(
+	command: [
+		python,
+		'-c',
+		'print("static int __attribute__((unused)) __zbar_dummy;")'
+	],
+	capture: true,
+	output: '_zbar_dummy.c'
+  )
+else
+	zbar_dummy = configure_file(
+		command: [
+			python,
+			'-c',
+			'print("static int __zbar_dummy; int dummy(void) { return __zbar_dummy; }")'
+		],
+		capture: true,
+		output: '_zbar_dummy.c'
+	)
+endif
+
+if get_option('default_library') in ['shared', 'both']
+	libzbar = shared_library('zbar',
+		zbar_dummy,
+		c_args: c_args,
+		link_args: vflag,
+		link_whole: libzbar_static,
+		dependencies: deps,
+		include_directories: include_dirs,
+		vs_module_defs: zbar_def,
+		link_depends: zbar_def,
+		version: meson.project_version(),
+		install: true,
+	)
+else
+	libzbar = libzbar_static
+endif
+
+pkg = import('pkgconfig')
+
+pkg.generate(
+	libzbar,
+	description: 'bar code scanning and decoding',
+	url: 'http://zbar.sourceforge.net',
+)
diff --git a/zbar/processor.h b/zbar/processor.h
index a8289e0..7a67f2d 100644
--- a/zbar/processor.h
+++ b/zbar/processor.h
@@ -29,7 +29,9 @@
 #endif
 #include <stdlib.h>
 #include <string.h>
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 
 #include <zbar.h>
 #include "error.h"
--
2.47.0.windows.2

