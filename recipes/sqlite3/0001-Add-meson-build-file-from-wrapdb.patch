From cb631360afe6ec7fcd7f18b341c5a9e0a4f7d07f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tim-Philipp=20M=C3=BCller?= <tim@centricular.com>
Date: Wed, 19 Feb 2025 11:36:35 +0000
Subject: [PATCH] Add meson build file from wrapdb

https://wrapdb.mesonbuild.com/v2/sqlite3_3.49.1-1/get_patch
---
 LICENSE.build     |  19 +++++++
 meson.build       | 139 ++++++++++++++++++++++++++++++++++++++++++++++
 meson_options.txt |  50 +++++++++++++++++
 3 files changed, 208 insertions(+)
 create mode 100644 LICENSE.build
 create mode 100644 meson.build
 create mode 100644 meson_options.txt

diff --git a/LICENSE.build b/LICENSE.build
new file mode 100644
index 0000000..b59833d
--- /dev/null
+++ b/LICENSE.build
@@ -0,0 +1,19 @@
+Copyright (c) 2021 The Meson development team
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/meson.build b/meson.build
new file mode 100644
index 0000000..8e63b01
--- /dev/null
+++ b/meson.build
@@ -0,0 +1,139 @@
+project(
+  'sqlite3',
+  'c',
+  license: 'pd',
+  version: '3.49.1',
+  meson_version: '>=0.48.0',
+)
+
+cc = meson.get_compiler('c')
+if meson.version().version_compare('>= 0.62.0')
+  libdl = dependency('dl', required: false)
+else
+  libdl = cc.find_library('dl', required: false)
+endif
+libm = cc.find_library('m', required: false)
+
+sources = files('sqlite3.c')
+
+sqlite_args = [
+  '-DSQLITE_ENABLE_COLUMN_METADATA',
+  '-DSQLITE_ENABLE_DBSTAT_VTAB',
+  '-DSQLITE_ENABLE_UNLOCK_NOTIFY',
+  '-DSQLITE_SECURE_DELETE',
+]
+
+if get_option('strict')
+  sqlite_args += [
+    '-DSQLITE_LIKE_DOESNT_MATCH_BLOBS',
+    '-DSQLITE_STRICT_SUBTYPE=1',
+  ]
+endif
+
+extensions = [
+  ['fts34', true, [
+    '-DSQLITE_ENABLE_FTS3',
+    '-DSQLITE_ENABLE_FTS3_PARENTHESIS',
+    '-DSQLITE_ENABLE_FTS3_TOKENIZER',
+  ]],
+  ['fts5', true, '-DSQLITE_ENABLE_FTS5'],
+  ['geopoly', false, '-DSQLITE_ENABLE_GEOPOLY'],
+  ['rbu', false, '-DSQLITE_ENABLE_RBU'],
+  ['rtree', false, '-DSQLITE_ENABLE_RTREE'],
+  ['session', false, [
+    '-DSQLITE_ENABLE_SESSION',
+    '-DSQLITE_ENABLE_PREUPDATE_HOOK'
+  ]],
+]
+extension_default = get_option('all-extensions')
+foreach extension : extensions
+  option = get_option(extension[0])
+  if option.auto()
+    if extension_default.auto()
+      enabled = extension[1]
+    else
+      enabled = extension_default.enabled()
+    endif
+  else
+    enabled = option.enabled()
+  endif
+  if enabled
+    sqlite_args += extension[2]
+  endif
+endforeach
+
+if host_machine.system() == 'windows'
+  if get_option('default_library') != 'static'
+    sqlite_args += ['-DSQLITE_API=__declspec(dllexport)']
+  endif
+  libthreads = dependency('', required: false)
+else
+  sqlite_args += ['-DSQLITE_API=__attribute__((visibility("default")))']
+  libthreads = dependency('threads')
+endif
+
+foreach h: [
+  'inttypes.h',
+  'malloc.h',
+  'stdint.h',
+]
+  if cc.has_header(h)
+    sqlite_args += '-DHAVE_' + h.to_upper().underscorify()
+  endif
+endforeach
+
+foreach signed: ['', 'u']
+  foreach width: ['8', '16', '32']
+    typ = signed + 'int' + width + '_t'
+    if cc.has_type(typ, prefix: '#include <stdint.h>')
+      sqlite_args += '-DHAVE_' + typ.to_upper()
+    endif
+  endforeach
+endforeach
+
+foreach f: [
+  'malloc_usable_size',
+  'posix_fallocate',
+  'strchrnul',
+  'strerror_r',
+]
+  if cc.has_function(f)
+    sqlite_args += '-DHAVE_' + f.to_upper()
+  endif
+endforeach
+if cc.has_function('isnan', dependencies: libm)
+  sqlite_args += '-DSQLITE_HAVE_ISNAN'
+endif
+
+libsqlite3 = library(
+  'sqlite3',
+  sources,
+  c_args: sqlite_args,
+  dependencies: [libdl, libm, libthreads],
+  install: true,
+  gnu_symbol_visibility: 'hidden',
+  # ABI compatibility with autotools/libtool
+  version: '0.8.6',
+)
+
+sqlite_args = []
+if host_machine.system() == 'windows' and get_option('default_library') != 'static'
+  sqlite_args += '-DSQLITE_API=__declspec(dllimport)'
+endif
+
+depinc = include_directories('.')
+sqlite3_dep = declare_dependency(
+  compile_args: sqlite_args,
+  include_directories: depinc,
+  link_with: libsqlite3,
+)
+
+install_headers('sqlite3.h')
+
+pkgconfig = import('pkgconfig')
+pkgconfig.generate(
+  libsqlite3,
+  description: 'An embedded SQL database engine',
+  version: meson.project_version(),
+  extra_cflags: sqlite_args,
+)
diff --git a/meson_options.txt b/meson_options.txt
new file mode 100644
index 0000000..41bef82
--- /dev/null
+++ b/meson_options.txt
@@ -0,0 +1,50 @@
+option(
+  'strict',
+  description: 'Enable extra checks',
+  type: 'boolean',
+  value: true
+)
+
+# extensions
+option(
+  'all-extensions',
+  description: 'Enable or disable all known extensions by default',
+  type: 'feature',
+  value: 'auto'
+)
+option(
+  'fts34',
+  description: 'Enable FTS3 and FTS4',
+  type: 'feature',
+  value: 'auto'
+)
+option(
+  'fts5',
+  description: 'Enable FTS5',
+  type: 'feature',
+  value: 'auto'
+)
+option(
+  'geopoly',
+  description: 'Enable Geopoly extension',
+  type: 'feature',
+  value: 'auto'
+)
+option(
+  'rbu',
+  description: 'Enable Resumable Bulk Update extension',
+  type: 'feature',
+  value: 'auto'
+)
+option(
+  'rtree',
+  description: 'Enable R*Tree index extension',
+  type: 'feature',
+  value: 'auto'
+)
+option(
+  'session',
+  description: 'Enable session extension',
+  type: 'feature',
+  value: 'auto'
+)
-- 
2.47.2

