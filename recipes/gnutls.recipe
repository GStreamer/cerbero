# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
# From https://github.com/fluendo/cerbero

from cerbero.utils import shell
from cerbero.utils import needs_xcode8_sdk_workaround

class Recipe(recipe.Recipe):
    name = 'gnutls'
    version = '3.7.0'
    url = 'https://www.gnupg.org/ftp/gcrypt/%(name)s/v%(maj_ver)s/%(name)s-%(version)s.tar.xz'
    tarball_checksum = '49e2a22691d252c9f24a9829b293a8f359095bc5a818351f05f1c0a5188a1df8'
    stype = SourceType.TARBALL
    # main library is LGPLv2+ and binaries is GPLv3+ and defined below
    licenses = [{License.LGPLv2Plus: None, License.Misc: ['LICENSE']}]
    configure_options = "--enable-local-libopts --disable-guile --disable-openssl-compatibility \
        --without-p11-kit --enable-static --enable-zlib --enable-shared \
        --disable-doc --disable-tests --with-included-unistring"
    deps = ['zlib', 'nettle', 'libtasn1']
    platform_deps = {
        Platform.WINDOWS: ['proxy-libintl'],
        Platform.ANDROID: ['proxy-libintl'],
        Platform.IOS: ['proxy-libintl'],
        Platform.DARWIN: ['proxy-libintl']
    }
    patches = [name + "/0001-Undefine-__USE_MINGW_ANSI_STDIO-as-otherwise-stdio.h.patch",
               name + "/0001-pgusage-remove-system-call.patch",
               name + "/0001-Fix-armv8-architecture-for-clang.patch"]
    autoreconf = True

    files_libs = ['libgnutls', 'libgnutlsxx']
    files_bins = ['gnutls-cli', 'gnutls-serv', 'gnutls-cli-debug']
    licenses_bins = [License.GPLv3Plus]
    files_devel = ['lib/pkgconfig/gnutls.pc', 'include/gnutls']
    files_lang = ['gnutls']

    def prepare(self):
        if needs_xcode8_sdk_workaround(self.config):
            self.set_env('ac_cv_func_clock_gettime', 'no')
            self.set_env('ac_cv_func_clock_settime', 'no')
        if self.config.target_platform == Platform.WINDOWS:
            self.configure_options += ' --enable-threads=win32'
            self.can_use_configure_cache = False
        if self.config.target_platform == Platform.DARWIN:
            self.configure_options += ' --disable-hardware-acceleration'
        if self.config.target_platform == Platform.ANDROID:
            self.configure_options += ' --disable-cxx'
            self.files_libs.remove('libgnutlsxx')
        if self.config.target_platform == Platform.IOS:
            if self.config.target_arch == Architecture.ARM64:
                self.configure_options += ' --disable-hardware-acceleration'
            self.configure_options += ' --disable-cxx'
            self.files_libs.remove('libgnutlsxx')

    async def configure(self):
        if needs_xcode8_sdk_workaround(self.config):
            # There is no env var that can be set to make the AC_COMPILE_IFELSE
            # macro that checks this evaluate to 'no', so we change the symbol.
            # Edit configure.ac and not configure because we autoreconf later.
            shell.replace(os.path.join(self.build_dir, 'configure.ac'),
                          {'getentropy': 'getentropy_DISABLED_NOT_FOR_MACOS10_12'})
        # Call configure from the base class
        await super(recipe.Recipe, self).configure()

