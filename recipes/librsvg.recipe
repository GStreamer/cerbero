# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python

from cerbero.tools.libtool import LibtoolLibrary
from cerbero.utils import to_winpath
from pathlib import Path
import shlex

class Recipe(recipe.Recipe):
    name = 'librsvg'
    version = '2.58.93'
    licenses = [License.LGPLv2Plus]
    deps = ['gdk-pixbuf', 'pango', 'cairo', 'libxml2']
    btype = BuildType.MESON
    stype = SourceType.TARBALL
    url = 'gnome://'
    tarball_checksum = 'f116eaf8196fc8261b0bbbdf996a4fe1bc97dc25664f953b328194d049a0dada'

    files_libs = ['librsvg-2']
    files_bins = ['rsvg-convert']
    licenses_bins = [License.GPLv2Plus]
    files_loader = ['%(libdir)s/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-svg%(mext)s']
    files_devel = ['include/librsvg-2.0/librsvg/*.h',
                   '%(libdir)s/pkgconfig/librsvg-2.0.pc']
    files_typelibs = ['Rsvg-2.0']

    meson_options = {
        'introspection': 'disabled',
        'docs': 'disabled',
        'vala': 'disabled',
        'tests': 'false',
    }

    def append_config_toml(self, s):
        dot_cargo = Path(self.config_src_dir) / '.cargo'
        dot_cargo.mkdir(exist_ok=True)
        # Append so we don't overwrite cargo vendor settings
        with (dot_cargo / 'config.toml').open('a') as f:
            f.write(s)

    def get_llvm_tool(self, tool: str) -> Path:
        '''
        Gets one of the LLVM tools matching the current Rust toolchain.
        '''
        root_dir = shell.check_output(
            ["rustc", "--print", "sysroot"], env=self.env
        ).strip()

        tools = list(Path(root_dir).glob(f"**/{tool}"))

        if len(tools) == 0:
            raise FatalError(
                f"Rust {tool} tool not found at {root_dir}, try re-running bootstrap"
            )
        return tools[0]

    def prepare(self):
        if self.config.target_platform == Platform.WINDOWS:
            # Cargo tries to look up an import lib when LibraryType.BOTH
            # librsvg only generates the shared library
            self.library_type = LibraryType.SHARED
        self.target_triple = self.config.rust_triple(self.config.target_arch,
            self.config.target_platform, self.using_msvc())
        self.meson_options['triplet'] = self.target_triple

    async def configure(self):
        # AppleClang's nm is too old
        # This should be injected as in android.config
        if self.config.target_platform in [Platform.DARWIN, Platform.IOS]:
            self.env['NM'] = str(self.get_llvm_tool("llvm-nm"))
        if self.config.target_platform == Platform.DARWIN or self.using_msvc():
            s = '\n[profile.release]\nstrip = "debuginfo"\n'
            self.append_config_toml(s)
        elif self.config.target_platform != Platform.ANDROID:
            s = '\n[profile.release]\nsplit-debuginfo = "packed"\n'
            self.append_config_toml(s)
        s = '[build]\n' \
            f'target = "{self.target_triple}"\n'
        self.append_config_toml(s)
        if self.config.target_platform == Platform.ANDROID:
            # Use the compiler's forwarding
            # See https://android.googlesource.com/platform/ndk/+/master/docs/BuildSystemMaintainers.md#linkers
            linker = self.get_env('RUSTC_LINKER')
            link_args = []
            # We need to extract necessary linker flags from LDFLAGS which is
            # passed to the compiler
            for arg in shlex.split(self.get_env('LDFLAGS', '')):
                link_args += ['-C', f"link-arg={arg}"]
            s = f'[target.{self.target_triple}]\n' \
                f'linker = "{linker}"\n' \
                f'rustflags = {link_args!r}\n'
            self.append_config_toml(s)

        if self.using_msvc():
            # Making MSYS2's `env` available mucks up Meson
            # https://github.com/mesonbuild/meson/blob/30c38e2bd69b2bab74b6e76da1c626f3c9853613/mesonbuild/backend/backends.py#L638
            # Code should be kept in sync with shell.get_path_minus_msys()
            path = self.env['PATH'].split(os.pathsep)
            msys2_prefix = to_winpath('/')
            for p in path:
                if msys2_prefix in p:
                    self.remove_env('PATH', p, sep=os.pathsep)
        await super().configure()

    async def compile(self):
        # This recipe mixes Meson with Rust!
        # Pass through the number of Ninja jobs as an upper limit
        self.set_env('CARGO_BUILD_JOBS', f'{self.num_of_cpus()}')
        await super().compile()

    def post_install(self):
        LibtoolLibrary('librsvg', None, None, None, self.config.libdir,
                self.config.target_platform).save()
        super().post_install()
