# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
from pathlib import Path
from cerbero.tools.libtool import LibtoolLibrary

class Recipe(recipe.Recipe):
    name = 'svt-jpeg-xs'
    version = '0.9.0'
    licenses = [{License.BSD_like: ['LICENSE.md']}]
    stype = SourceType.TARBALL
    btype = BuildType.CMAKE
    cmake_generator = 'ninja'
    can_msvc = True
    url = 'https://github.com/OpenVisualCloud/SVT-JPEG-XS/archive/refs/tags/v%(version)s.tar.gz'
    tarball_dirname = 'SVT-JPEG-XS-%(version)s'
    tarball_checksum = 'ff5dfb3b98348a39049da4fd3062d3391cbadec4c4b61825a9f3435ca671effa'
    configure_options = ' -DNATIVE=OFF -DBUILD_APPS=OFF -DBUILD_TESTING=OFF '

    files_libs = ['libSvtJpegxs']
    files_devel = [
        'include/svt-jpegxs/',
        '%(libdir)s/pkgconfig/SvtJpegxs.pc'
    ]
    library_type = LibraryType.SHARED

    def prepare(self):
        if self.config.target_platform in (Platform.IOS, Platform.ANDROID):
            self.configure_options += ' -DBUILD_SHARED_LIBS=OFF '
            self.library_type = LibraryType.STATIC

        if self.config.target_arch in (Architecture.X86, Architecture.X86_64):
            self.configure_options += ' -DENABLE_NASM=ON '

    async def configure(self):
        if self.config.target_platform == Platform.WINDOWS:
            system_name = 'Windows'
        elif self.config.target_platform == Platform.LINUX:
            system_name = 'Linux'
        elif self.config.target_platform == Platform.DARWIN:
            system_name = 'Darwin'
        elif self.config.target_platform == Platform.IOS:
            system_name = 'iOS'

        # We always need a toolchain file because CMakeLists.txt requires these values to be set.
        # The Android NDK provides one, so we use that as-is.
        # This recipe uses these to decide which optimizations to use:
        # https://github.com/pnggroup/libpng/blob/libpng16/CMakeLists.txt#L130
        if self.config.target_platform == Platform.ANDROID:
            arch = self.config.target_arch
            if self.config.target_arch == Architecture.ARMv7:
                arch = 'armeabi-v7a'
            elif self.config.target_arch == Architecture.ARM64:
                arch = 'arm64-v8a'
            self.configure_options += f" -DCMAKE_TOOLCHAIN_FILE={self.config.env['ANDROID_NDK_HOME']}/build/cmake/android.toolchain.cmake -DANDROID_ABI={arch}"
            self.configure_options += f' -DANDROID_PLATFORM={DistroVersion.get_android_api_version(self.config.target_distro_version)}'
        else:
            with open(f'{self.config_src_dir}/toolchain.cmake', 'w') as f:
                f.write(f'set(CMAKE_SYSTEM_NAME {system_name})\n')
                f.write(f'set(CMAKE_SYSTEM_PROCESSOR {self.config.target_arch})\n')
            self.configure_options += f' -DCMAKE_TOOLCHAIN_FILE={self.config_src_dir}/toolchain.cmake'

        await super().configure()

    # https://github.com/OpenVisualCloud/SVT-JPEG-XS/blob/e1030c6c8ee2fb05b76c3fa14cccf8346db7a1fa/Source/Lib/CMakeLists.txt#L91
    async def install(self):
        await super(Recipe, self).install()
        if self.config.target_platform == Platform.WINDOWS:
            lib = f"{'' if self.using_msvc() else 'lib'}SvtJpegxs.dll"
            src = Path(self.config.libdir) / lib
            src.replace(
                Path(self.config.prefix) / 'bin' / lib
            )

    def post_install(self):
        libtool_la = LibtoolLibrary('SvtJpegxs', None, None, None, self.config.libdir,
                self.config.target_platform, [])
        libtool_la.save()
        super().post_install()
