 # -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python

from pathlib import Path


class Recipe(recipe.Recipe):
    name = 'x265-10bit'
    version = '3.6'
    licenses = [License.GPLv2Plus]
    stype = SourceType.CUSTOM
    btype = BuildType.CMAKE
    library_type = LibraryType.STATIC
    cmake_generator = 'ninja'
    can_msvc = True
    configure_options = ' -DENABLE_SHARED=OFF -DENABLE_CLI=OFF -DHIGH_BIT_DEPTH=ON -DEXPORT_C_API=OFF '
    deps = ['x265-src']

    # files_libs = ['libx265-10bit']

    def prepare(self):
        if self.config.target_platform == Platform.ANDROID:
            self.append_env('CXXFLAGS', '-frtti', '-fexceptions')
            if self.config.target_arch != Architecture.X86_64:
                # Arm64 assembly is completely incompatible
                self.configure_options += ' -DENABLE_ASSEMBLY=OFF '
        # x265 ignores CCASFLAGS
        elif self.config.target_platform == Platform.IOS:
            self.configure_options += ' -DENABLE_ASSEMBLY=OFF '
        elif self.config.target_arch == Architecture.X86:
            # on x86 it tries to use the high bank of AVX
            self.configure_options += ' -DENABLE_ASSEMBLY=OFF '
        self.config_src_dir = os.path.join(self.config.sources, f'x265-src-{self.version}', 'source')
        self.build_dir = os.path.join(self.config_src_dir, 'b-10bit')
        self.make_dir = self.config_src_dir

    async def configure(self):
        if self.config.target_platform == Platform.WINDOWS:
            system_name = 'Windows'
        elif self.config.target_platform == Platform.LINUX:
            system_name = 'Linux'
        elif self.config.target_platform == Platform.DARWIN:
            system_name = 'Darwin'
        elif self.config.target_platform == Platform.IOS:
            system_name = 'iOS'

        # We always need a toolchain file because CMakeLists.txt requires these values to be set.
        # The Android NDK provides one, so we use that as-is.
        # This recipe uses these to decide which optimizations to use:
        # https://github.com/pnggroup/libpng/blob/libpng16/CMakeLists.txt#L130
        if self.config.target_platform == Platform.ANDROID:
            arch = self.config.target_arch
            if self.config.target_arch == Architecture.ARMv7:
                arch = 'armeabi-v7a'
            elif self.config.target_arch == Architecture.ARM64:
                arch = 'arm64-v8a'
            self.configure_options += f" -DCMAKE_TOOLCHAIN_FILE={self.config.env['ANDROID_NDK_HOME']}/build/cmake/android.toolchain.cmake -DANDROID_ABI={arch}"
        else:
            Path(self.build_dir).mkdir(exist_ok=True)
            with open(f'{self.build_dir}/toolchain.cmake', 'w') as f:
                f.write(f'set(CMAKE_SYSTEM_NAME {system_name})\n')
                f.write(f'set(CMAKE_SYSTEM_PROCESSOR {self.config.target_arch})\n')
            self.configure_options += f' -DCMAKE_TOOLCHAIN_FILE={self.build_dir}/toolchain.cmake'

        await super().configure()

    # Set up the HDR library - DO NOT EXECUTE any kind of install
    async def install(self):
        prefix = '' if self.using_msvc() else 'lib'
        src = Path(self.build_dir) / f'{prefix}x265.a'
        dest = src.with_stem(f"{'' if self.using_msvc() else 'lib'}{self.name}")
        src.replace(dest)
