From 1c5d6f85d61e783c76736835f8a17dc8432bb652 Mon Sep 17 00:00:00 2001
From: Nirbheek Chauhan <nirbheek@centricular.com>
Date: Wed, 27 May 2020 00:43:26 +0530
Subject: [PATCH 05/25] glib: getpid() is available on Win32, but not WinRT

---
 glib/gmessages.c | 18 ++++++++++++------
 glib/gslice.c    | 11 +++++++++--
 2 files changed, 21 insertions(+), 8 deletions(-)

diff --git a/glib/gmessages.c b/glib/gmessages.c
index 499182b..3d99608 100644
--- a/glib/gmessages.c
+++ b/glib/gmessages.c
@@ -211,13 +211,15 @@
 #endif
 
 #ifdef G_OS_WIN32
-#include <process.h>		/* For getpid() */
+#ifndef G_WINAPI_ONLY_APP
+#include <process.h>		/* For getpid(), not available on UWP */
+#endif
 #include <io.h>
 #  include <windows.h>
 
 #ifndef ENABLE_VIRTUAL_TERMINAL_PROCESSING
 #define ENABLE_VIRTUAL_TERMINAL_PROCESSING 0x0004
-#endif
+#endif /* G_OS_WIN32 */
 
 #if defined (_MSC_VER) && (_MSC_VER >=1400)
 /* This is ugly, but we need it for isatty() in case we have bad fd's,
@@ -2321,7 +2323,11 @@ g_log_writer_format_fields (GLogLevelFlags   log_level,
       (log_level & G_LOG_LEVEL_MASK))
     {
       const gchar *prg_name = g_get_prgname ();
+#ifndef G_WINAPI_ONLY_APP
       gulong pid = getpid ();
+#else
+      gulong pid = 0UL;
+#endif
 
       if (prg_name == NULL)
         g_string_append_printf (gstring, "(process:%lu): ", pid);
@@ -2887,7 +2893,7 @@ _g_log_writer_fallback (GLogLevelFlags   log_level,
       write_string_sized (stream, field->value, field->length);
     }
 
-#ifndef G_OS_WIN32
+#ifndef G_WINAPI_ONLY_APP
   {
     gchar pid_string[FORMAT_UNSIGNED_BUFSIZE];
 
@@ -3128,7 +3134,7 @@ _g_log_fallback_handler (const gchar   *log_domain,
 			 gpointer       unused_data)
 {
   gchar level_prefix[STRING_BUFFER_SIZE];
-#ifndef G_OS_WIN32
+#ifndef G_WINAPI_ONLY_APP
   gchar pid_string[FORMAT_UNSIGNED_BUFSIZE];
 #endif
   FILE *stream;
@@ -3144,7 +3150,7 @@ _g_log_fallback_handler (const gchar   *log_domain,
   if (!message)
     message = "(NULL) message";
 
-#ifndef G_OS_WIN32
+#ifndef G_WINAPI_ONLY_APP
   format_unsigned (pid_string, getpid (), 10);
 #endif
 
@@ -3153,7 +3159,7 @@ _g_log_fallback_handler (const gchar   *log_domain,
   else
     write_string (stream, "\n** ");
 
-#ifndef G_OS_WIN32
+#ifndef G_WINAPI_ONLY_APP
   write_string (stream, "(process:");
   write_string (stream, pid_string);
   write_string (stream, "): ");
diff --git a/glib/gslice.c b/glib/gslice.c
index 36fa084..8999294 100644
--- a/glib/gslice.c
+++ b/glib/gslice.c
@@ -31,9 +31,12 @@
 #ifdef G_OS_UNIX
 #include <unistd.h>             /* sysconf() */
 #endif
+
 #ifdef G_OS_WIN32
 #include <windows.h>
-#include <process.h>
+#ifndef G_WINAPI_ONLY_APP
+#include <process.h>            /* getpid(), not available on UWP */
+#endif
 #endif
 
 #include <stdio.h>              /* fputs */
@@ -1517,10 +1520,14 @@ mem_error (const char *format,
 {
   const char *pname;
   va_list args;
+  gulong pid = 0;
   /* at least, put out "MEMORY-ERROR", in case we segfault during the rest of the function */
   fputs ("\n***MEMORY-ERROR***: ", stderr);
   pname = g_get_prgname();
-  g_fprintf (stderr, "%s[%ld]: GSlice: ", pname ? pname : "", (long)getpid());
+#ifndef G_WINAPI_ONLY_APP
+  pid = getpid();
+#endif
+  g_fprintf (stderr, "%s[%lu]: GSlice: ", pname ? pname : "", pid);
   va_start (args, format);
   g_vfprintf (stderr, format, args);
   va_end (args);
-- 
2.38.1

