From c56f33cd30a86fbd5cf572121a7571aae1b7611d Mon Sep 17 00:00:00 2001
From: Nirbheek Chauhan <nirbheek@centricular.com>
Date: Fri, 16 Aug 2019 13:56:39 +0530
Subject: [PATCH 18/24] gio: Disable win32 API and modules when unavailable on
 WinRT

The modules listed below are useless on a UWP app:

* gwin32filemonitor
* gwin32volumemonitor
* gwinhttpvfs

The following APIs are also useless:

* gwin32mount
* gwin32registrykey

Don't build them at all so that apps get errors at build time instead
of runtime.

TODO: the following need to be ported to new WinRT APIs:

* gwin32networkmonitor (giomodule)
* gwin32appinfo.c (currently stubbed out)
* gmemorymonitorwin32
---
 gio/gappinfo.h  |  5 +++++
 gio/giomodule.c | 32 +++++++++++++++++---------------
 gio/meson.build |  5 ++---
 3 files changed, 24 insertions(+), 18 deletions(-)

diff --git a/gio/gappinfo.h b/gio/gappinfo.h
index 93974db7f..38a8ca540 100644
--- a/gio/gappinfo.h
+++ b/gio/gappinfo.h
@@ -275,6 +275,11 @@ GIO_AVAILABLE_IN_2_50
 gboolean  g_app_info_launch_default_for_uri_finish (GAsyncResult         *result,
                                                     GError              **error);
 
+#ifdef G_WINAPI_ONLY_APP
+#define g_app_info_get_default_for_type(x,y) NULL
+#define g_app_info_get_default_for_uri_scheme(x) NULL
+#define g_app_info_get_all() NULL
+#endif
 
 /**
  * GAppLaunchContext:
diff --git a/gio/giomodule.c b/gio/giomodule.c
index 74f050da1..5282f748c 100644
--- a/gio/giomodule.c
+++ b/gio/giomodule.c
@@ -1063,14 +1063,10 @@ _g_io_module_get_default (const gchar         *extension_point,
 
 extern GType g_inotify_file_monitor_get_type (void);
 extern GType g_kqueue_file_monitor_get_type (void);
-extern GType g_win32_file_monitor_get_type (void);
 
 extern GType _g_unix_volume_monitor_get_type (void);
 extern GType _g_local_vfs_get_type (void);
 
-extern GType _g_win32_volume_monitor_get_type (void);
-extern GType _g_winhttp_vfs_get_type (void);
-
 extern GType _g_dummy_proxy_resolver_get_type (void);
 extern GType _g_dummy_tls_backend_get_type (void);
 extern GType g_network_monitor_base_get_type (void);
@@ -1100,6 +1096,11 @@ extern GType g_cocoa_notification_backend_get_type (void);
 #ifdef G_PLATFORM_WIN32
 extern GType g_win32_notification_backend_get_type (void);
 
+#ifndef G_WINAPI_ONLY_APP
+extern GType g_win32_file_monitor_get_type (void);
+extern GType _g_win32_volume_monitor_get_type (void);
+extern GType _g_winhttp_vfs_get_type (void);
+
 #include <windows.h>
 extern GType _g_win32_network_monitor_get_type (void);
 
@@ -1159,6 +1160,7 @@ giomodule_init_ctor (void)
 #error Your platform/compiler is missing constructor support
 #endif /* GLIB_STATIC_COMPILATION */
 
+/* Currently only used in gdbusprivate.c */
 void *
 _g_io_win32_get_module (void)
 {
@@ -1184,7 +1186,9 @@ _g_io_modules_ensure_extension_points_registered (void)
 #if !GLIB_CHECK_VERSION (3, 0, 0)
       ep = g_io_extension_point_register (G_DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME);
       g_io_extension_point_set_required_type (ep, G_TYPE_DESKTOP_APP_INFO_LOOKUP);
-#endif
+#endif /* !G_WINAPI_ONLY_APP */
+
+#endif /* G_PLATFORM_WIN32 */
 #endif
 
       ep = g_io_extension_point_register (G_LOCAL_FILE_MONITOR_EXTENSION_POINT_NAME);
@@ -1249,7 +1253,7 @@ get_gio_module_dir (void)
   module_dir = !is_setuid ? g_strdup (g_getenv ("GIO_MODULE_DIR")) : NULL;
   if (module_dir == NULL)
     {
-#ifdef G_OS_WIN32
+#if defined(G_OS_WIN32) && !defined(G_WINAPI_ONLY_APP)
       gchar *install_dir;
 
       install_dir = g_win32_get_package_installation_directory_of_module (gio_dll);
@@ -1355,10 +1359,15 @@ _g_io_modules_ensure_loaded (void)
       g_type_ensure (g_kqueue_file_monitor_get_type ());
 #endif
 #ifdef G_OS_WIN32
+      g_type_ensure (g_win32_notification_backend_get_type ());
+#ifndef G_WINAPI_ONLY_APP
+      g_type_ensure (_g_win32_network_monitor_get_type ());
       g_type_ensure (_g_win32_volume_monitor_get_type ());
-      g_type_ensure (g_win32_file_monitor_get_type ());
+      g_type_ensure (_g_winhttp_vfs_get_type ());
       g_type_ensure (g_registry_settings_backend_get_type ());
-#endif
+      g_type_ensure (g_win32_file_monitor_get_type ());
+#endif /* !G_WINAPI_ONLY_APP */
+#endif /* G_OS_WIN32 */
 #ifdef HAVE_COCOA
       g_type_ensure (g_nextstep_settings_backend_get_type ());
       g_type_ensure (g_osx_app_info_get_type ());
@@ -1377,10 +1386,6 @@ _g_io_modules_ensure_loaded (void)
 #endif
 #if MAC_OS_X_VERSION_MIN_REQUIRED >= 1090
       g_type_ensure (g_cocoa_notification_backend_get_type ());
-#endif
-#ifdef G_OS_WIN32
-      g_type_ensure (g_win32_notification_backend_get_type ());
-      g_type_ensure (_g_winhttp_vfs_get_type ());
       g_type_ensure (g_memory_monitor_win32_get_type ());
 #endif
       g_type_ensure (_g_local_vfs_get_type ());
@@ -1396,9 +1401,6 @@ _g_io_modules_ensure_loaded (void)
       g_type_ensure (_g_network_monitor_netlink_get_type ());
       g_type_ensure (_g_network_monitor_nm_get_type ());
 #endif
-#ifdef G_OS_WIN32
-      g_type_ensure (_g_win32_network_monitor_get_type ());
-#endif
 
       g_once_init_leave (&loaded_dirs, TRUE);
     }
diff --git a/gio/meson.build b/gio/meson.build
index e8818eaf6..334632fae 100644
--- a/gio/meson.build
+++ b/gio/meson.build
@@ -559,6 +559,7 @@ gio_base_sources = files(
   'gsimpleiostream.c',
   'gsimplepermission.c',
   'gsimpleproxyresolver.c',
+  'gthreadedresolver.c',
   'gsocket.c',
   'gsocketaddress.c',
   'gsocketaddressenumerator.c',
@@ -578,8 +579,6 @@ gio_base_sources = files(
   'gtcpwrapperconnection.c',
   'gthemedicon.c',
   'gthreadedsocketservice.c',
-  'gthreadedresolver.c',
-  'gthreadedresolver.h',
   'gtlsbackend.c',
   'gtlscertificate.c',
   'gtlsclientconnection.c',
@@ -803,7 +802,7 @@ if have_func_kqueue and have_func_kevent
   internal_deps += [ kqueue_lib ]
 endif
 
-if host_system == 'windows'
+if host_system == 'windows' and not glib_conf.has('G_WINAPI_ONLY_APP')
   subdir('win32')
   internal_deps += [ giowin32_lib ]
 endif
-- 
2.44.0.windows.1

