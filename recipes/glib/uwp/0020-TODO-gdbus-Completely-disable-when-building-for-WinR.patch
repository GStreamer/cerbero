From 086edb78fdc7bc5e82ab8d0a9067979c1e525ff4 Mon Sep 17 00:00:00 2001
From: Nirbheek Chauhan <nirbheek@centricular.com>
Date: Wed, 14 Aug 2019 15:38:54 +0530
Subject: [PATCH 20/25] TODO: gdbus: Completely disable when building for WinRT

Disable all GDBus APIs and everything that relies on it for now.
---
 fuzzing/meson.build |  5 ++++-
 gio/gapplication.h  |  7 +++++++
 gio/giomodule.c     |  9 +++++----
 gio/meson.build     | 32 ++++++++++++++++++++++++--------
 4 files changed, 40 insertions(+), 13 deletions(-)

diff --git a/fuzzing/meson.build b/fuzzing/meson.build
index e87abc7..df9152d 100644
--- a/fuzzing/meson.build
+++ b/fuzzing/meson.build
@@ -21,7 +21,6 @@ fuzz_targets = [
   'fuzz_canonicalize_filename',
   'fuzz_date_parse',
   'fuzz_date_time_new_from_iso8601',
-  'fuzz_dbus_message',
   'fuzz_inet_address_mask_new_from_string',
   'fuzz_inet_address_new_from_string',
   'fuzz_inet_socket_address_new_from_string',
@@ -38,6 +37,10 @@ fuzz_targets = [
   'fuzz_variant_text',
 ]
 
+if not glib_conf.has('G_WINAPI_ONLY_APP')
+  fuzz_targets += ['fuzz_dbus_message']
+endif
+
 deps = [libgmodule_dep, libgio_dep, libglib_dep, libgobject_dep]
 
 extra_sources = []
diff --git a/gio/gapplication.h b/gio/gapplication.h
index 3454053..14c7cfd 100644
--- a/gio/gapplication.h
+++ b/gio/gapplication.h
@@ -249,6 +249,13 @@ void                    g_application_unbind_busy_property              (GApplic
                                                                          gpointer                  object,
                                                                          const gchar              *property);
 
+#define g_application_get_type() NULL
+#define g_application_quit(x) NULL
+#define g_application_get_default() NULL
+#define g_application_run(x,y,z) 255
+#define g_application_register(x,y,z) FALSE
+#define g_application_hold(x) NULL
+
 G_END_DECLS
 
 #endif /* __G_APPLICATION_H__ */
diff --git a/gio/giomodule.c b/gio/giomodule.c
index 1f8042c..9a9402e 100644
--- a/gio/giomodule.c
+++ b/gio/giomodule.c
@@ -1097,9 +1097,8 @@ extern GType g_cocoa_notification_backend_get_type (void);
 #endif
 
 #ifdef G_PLATFORM_WIN32
-extern GType g_win32_notification_backend_get_type (void);
-
 #ifndef G_WINAPI_ONLY_APP
+extern GType g_win32_notification_backend_get_type (void);
 extern GType g_win32_file_monitor_get_type (void);
 extern GType _g_win32_volume_monitor_get_type (void);
 extern GType _g_winhttp_vfs_get_type (void);
@@ -1135,7 +1134,7 @@ extern void gobject_win32_init (void);
 
 #ifdef G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA
 #pragma G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS(giomodule_init_ctor)
-#endif
+#endif /* DLL_EXPORT */
 
 G_DEFINE_CONSTRUCTOR (giomodule_init_ctor)
 
@@ -1224,8 +1223,10 @@ _g_io_modules_ensure_extension_points_registered (void)
       ep = g_io_extension_point_register (G_NETWORK_MONITOR_EXTENSION_POINT_NAME);
       g_io_extension_point_set_required_type (ep, G_TYPE_NETWORK_MONITOR);
 
+#ifndef G_WINAPI_ONLY_APP
       ep = g_io_extension_point_register (G_NOTIFICATION_BACKEND_EXTENSION_POINT_NAME);
       g_io_extension_point_set_required_type (ep, G_TYPE_NOTIFICATION_BACKEND);
+#endif
 
       ep = g_io_extension_point_register (G_DEBUG_CONTROLLER_EXTENSION_POINT_NAME);
       g_io_extension_point_set_required_type (ep, G_TYPE_DEBUG_CONTROLLER);
@@ -1337,8 +1338,8 @@ _g_io_modules_ensure_loaded (void)
       g_type_ensure (g_kqueue_file_monitor_get_type ());
 #endif
 #ifdef G_OS_WIN32
-      g_type_ensure (g_win32_notification_backend_get_type ());
 #ifndef G_WINAPI_ONLY_APP
+      g_type_ensure (g_win32_notification_backend_get_type ());
       g_type_ensure (_g_win32_network_monitor_get_type ());
       g_type_ensure (_g_win32_volume_monitor_get_type ());
       g_type_ensure (_g_winhttp_vfs_get_type ());
diff --git a/gio/meson.build b/gio/meson.build
index ffef5e1..a290728 100644
--- a/gio/meson.build
+++ b/gio/meson.build
@@ -226,6 +226,10 @@ gdbus_sources = files(
   'gtestdbus.c',
 )
 
+if glib_conf.has('G_WINAPI_ONLY_APP')
+  gdbus_sources = []
+endif
+
 # Generate gdbus-codegen
 subdir('gdbus-2.0/codegen')
 
@@ -320,6 +324,11 @@ application_sources = files(
   'gnotificationbackend.c',
 )
 
+# Re-enable when gdbus APIs are re-enabled
+if glib_conf.has('G_WINAPI_ONLY_APP')
+  application_sources = files('gaction.c')
+endif
+
 local_sources = files(
   'ghttpproxy.c',
   'glocalfile.c',
@@ -350,6 +359,10 @@ gdbus_daemon_sources = [
   gdbus_daemon_generated,
 ]
 
+if glib_conf.has('G_WINAPI_ONLY_APP')
+  gdbus_daemon_sources = []
+endif
+
 if host_system != 'windows'
   unix_sources = files(
     'gfiledescriptorbased.c',
@@ -436,7 +449,6 @@ else
     'gwin32outputstream.c',
     'gwin32file-sync-stream.c',
     'gwin32packageparser.c',
-    'gwin32notificationbackend.c',
     'gwin32sid.c',
     'gwin32sid.h',
   )
@@ -453,6 +465,8 @@ else
       'gwin32volumemonitor.c',
       'gwin32networkmonitor.c',
       'gmemorymonitorwin32.c',
+      # Re-enable when gapplication is re-enabled
+      'gwin32notificationbackend.c',
     )
   endif
 
@@ -1031,13 +1045,15 @@ install_data(['gschema.loc', 'gschema.its'],
   install_tag : 'devel',
 )
 
-executable('gdbus', 'gdbus-tool.c',
-  install : true,
-  install_tag : 'bin',
-  c_args : gio_c_args,
-  # intl.lib is not compatible with SAFESEH
-  link_args : noseh_link_args,
-  dependencies : [libgio_dep, libgobject_dep, libgmodule_dep, libglib_dep])
+if not glib_conf.has('G_WINAPI_ONLY_APP')
+  executable('gdbus', 'gdbus-tool.c',
+    install : true,
+    install_tag : 'bin',
+    c_args : gio_c_args,
+    # intl.lib is not compatible with SAFESEH
+    link_args : noseh_link_args,
+    dependencies : [libgio_dep, libgobject_dep, libgmodule_dep, libglib_dep])
+endif
 
 if host_system != 'windows' and not glib_have_cocoa
   executable('gapplication', 'gapplication-tool.c',
-- 
2.38.1

