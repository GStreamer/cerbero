From af4e68cf3a60b90f1a8cfc1e5cfeb5ee25be6d14 Mon Sep 17 00:00:00 2001
From: Nirbheek Chauhan <nirbheek@centricular.com>
Date: Mon, 6 Mar 2023 16:15:29 +0530
Subject: [PATCH] Re-add support for std::atomic

Fixes deprecation warnings on macOS 10.12 and newer:

include/taglib/trefcounter.h:84:29: error: 'OSAtomicDecrement32Barrier' is deprecated: first deprecated in macOS 10.12 - Use std::atomic_fetch_sub() from <atomic> instead [-Werror,-Wdeprecated-declarations]
    bool deref() { return ! OSAtomicDecrement32Barrier(const_cast<int32_t*>(&refCount)); }
                            ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.0.sdk/usr/include/libkern/OSAtomicDeprecated.h:202:9: note: 'OSAtomicDecrement32Barrier' has been explicitly marked deprecated here
int32_t OSAtomicDecrement32Barrier( volatile int32_t *__theValue );
        ^
2 errors generated.

This reverts commit 8f6b6ac055a94ab7a274bae63cb3ffbf8a3939c0.
---
 ConfigureChecks.cmake          | 24 ++++++++---
 config.h.cmake                 |  1 +
 taglib/toolkit/trefcounter.cpp | 28 -------------
 taglib/toolkit/trefcounter.h   | 75 +++++++++++++++-------------------
 4 files changed, 53 insertions(+), 75 deletions(-)

diff --git a/ConfigureChecks.cmake b/ConfigureChecks.cmake
index 7d2ff953..956ab290 100644
--- a/ConfigureChecks.cmake
+++ b/ConfigureChecks.cmake
@@ -37,6 +37,17 @@ endif()
 # Determine which kind of atomic operations your compiler supports.
 
 check_cxx_source_compiles("
+  #include <atomic>
+  int main() {
+    std::atomic_int x(1);
+    ++x;
+    --x;
+    return 0;
+  }
+" HAVE_STD_ATOMIC)
+
+if(NOT HAVE_STD_ATOMIC)
+  check_cxx_source_compiles("
     int main() {
       volatile int x;
       __sync_add_and_fetch(&x, 1);
@@ -45,8 +56,8 @@ check_cxx_source_compiles("
     }
   " HAVE_GCC_ATOMIC)
 
-if(NOT HAVE_GCC_ATOMIC)
-  check_cxx_source_compiles("
+  if(NOT HAVE_GCC_ATOMIC)
+    check_cxx_source_compiles("
       #include <libkern/OSAtomic.h>
       int main() {
         volatile int32_t x;
@@ -56,8 +67,8 @@ if(NOT HAVE_GCC_ATOMIC)
       }
     " HAVE_MAC_ATOMIC)
 
-  if(NOT HAVE_MAC_ATOMIC)
-    check_cxx_source_compiles("
+    if(NOT HAVE_MAC_ATOMIC)
+      check_cxx_source_compiles("
         #include <windows.h>
         int main() {
           volatile LONG x;
@@ -67,8 +78,8 @@ if(NOT HAVE_GCC_ATOMIC)
         }
       " HAVE_WIN_ATOMIC)
 
-    if(NOT HAVE_WIN_ATOMIC)
-      check_cxx_source_compiles("
+      if(NOT HAVE_WIN_ATOMIC)
+        check_cxx_source_compiles("
           #include <ia64intrin.h>
           int main() {
             volatile int x;
@@ -77,6 +88,7 @@ if(NOT HAVE_GCC_ATOMIC)
             return 0;
           }
         " HAVE_IA64_ATOMIC)
+      endif()
     endif()
   endif()
 endif()
diff --git a/config.h.cmake b/config.h.cmake
index 8d8c36ab..c1a31094 100644
--- a/config.h.cmake
+++ b/config.h.cmake
@@ -11,6 +11,7 @@
 #cmakedefine   HAVE_OPENBSD_BYTESWAP 1
 
 /* Defined if your compiler supports some atomic operations */
+#cmakedefine   HAVE_STD_ATOMIC 1
 #cmakedefine   HAVE_GCC_ATOMIC 1
 #cmakedefine   HAVE_MAC_ATOMIC 1
 #cmakedefine   HAVE_WIN_ATOMIC 1
diff --git a/taglib/toolkit/trefcounter.cpp b/taglib/toolkit/trefcounter.cpp
index bbbac0ba..892f51c0 100644
--- a/taglib/toolkit/trefcounter.cpp
+++ b/taglib/toolkit/trefcounter.cpp
@@ -29,34 +29,6 @@
 
 #include "trefcounter.h"
 
-#if defined(HAVE_GCC_ATOMIC)
-# define ATOMIC_INT int
-# define ATOMIC_INC(x) __sync_add_and_fetch(&x, 1)
-# define ATOMIC_DEC(x) __sync_sub_and_fetch(&x, 1)
-#elif defined(HAVE_WIN_ATOMIC)
-# if !defined(NOMINMAX)
-#   define NOMINMAX
-# endif
-# include <windows.h>
-# define ATOMIC_INT long
-# define ATOMIC_INC(x) InterlockedIncrement(&x)
-# define ATOMIC_DEC(x) InterlockedDecrement(&x)
-#elif defined(HAVE_MAC_ATOMIC)
-# include <libkern/OSAtomic.h>
-# define ATOMIC_INT int32_t
-# define ATOMIC_INC(x) OSAtomicIncrement32Barrier(&x)
-# define ATOMIC_DEC(x) OSAtomicDecrement32Barrier(&x)
-#elif defined(HAVE_IA64_ATOMIC)
-# include <ia64intrin.h>
-# define ATOMIC_INT int
-# define ATOMIC_INC(x) __sync_add_and_fetch(&x, 1)
-# define ATOMIC_DEC(x) __sync_sub_and_fetch(&x, 1)
-#else
-# define ATOMIC_INT int
-# define ATOMIC_INC(x) (++x)
-# define ATOMIC_DEC(x) (--x)
-#endif
-
 namespace TagLib
 {
 
diff --git a/taglib/toolkit/trefcounter.h b/taglib/toolkit/trefcounter.h
index db97c538..22e90859 100644
--- a/taglib/toolkit/trefcounter.h
+++ b/taglib/toolkit/trefcounter.h
@@ -29,24 +29,37 @@
 #include "taglib_export.h"
 #include "taglib.h"
 
-#ifdef __APPLE__
-#  define OSATOMIC_DEPRECATED 0
-#  include <libkern/OSAtomic.h>
-#  define TAGLIB_ATOMIC_MAC
-#elif defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
-#  ifndef NOMINMAX
-#    define NOMINMAX
-#  endif
-#  include <windows.h>
-#  define TAGLIB_ATOMIC_WIN
-#elif defined (__GNUC__) && (__GNUC__ * 100 + __GNUC_MINOR__ >= 401)    \
-      && (defined(__i386__) || defined(__i486__) || defined(__i586__) || \
-          defined(__i686__) || defined(__x86_64) || defined(__ia64)) \
-      && !defined(__INTEL_COMPILER)
-#  define TAGLIB_ATOMIC_GCC
-#elif defined(__ia64) && defined(__INTEL_COMPILER)
-#  include <ia64intrin.h>
-#  define TAGLIB_ATOMIC_GCC
+#if defined(HAVE_STD_ATOMIC)
+# include <atomic>
+# define ATOMIC_INT std::atomic_int
+# define ATOMIC_INC(x) (++x)
+# define ATOMIC_DEC(x) (--x)
+#elif defined(HAVE_GCC_ATOMIC)
+# define ATOMIC_INT int
+# define ATOMIC_INC(x) __sync_add_and_fetch(&(x), 1)
+# define ATOMIC_DEC(x) __sync_sub_and_fetch(&(x), 1)
+#elif defined(HAVE_WIN_ATOMIC)
+# if !defined(NOMINMAX)
+#   define NOMINMAX
+# endif
+# include <windows.h>
+# define ATOMIC_INT long
+# define ATOMIC_INC(x) InterlockedIncrement(&x)
+# define ATOMIC_DEC(x) InterlockedDecrement(&x)
+#elif defined(HAVE_MAC_ATOMIC)
+# include <libkern/OSAtomic.h>
+# define ATOMIC_INT int32_t
+# define ATOMIC_INC(x) OSAtomicIncrement32Barrier(&x)
+# define ATOMIC_DEC(x) OSAtomicDecrement32Barrier(&x)
+#elif defined(HAVE_IA64_ATOMIC)
+# include <ia64intrin.h>
+# define ATOMIC_INT int
+# define ATOMIC_INC(x) __sync_add_and_fetch(&x, 1)
+# define ATOMIC_DEC(x) __sync_sub_and_fetch(&x, 1)
+#else
+# define ATOMIC_INT int
+# define ATOMIC_INC(x) (++x)
+# define ATOMIC_DEC(x) (--x)
 #endif
 
 #ifndef DO_NOT_DOCUMENT // Tell Doxygen to skip this class.
@@ -80,31 +93,11 @@ namespace TagLib
   public:
     RefCounterOld() : refCount(1) {}
 
-#ifdef TAGLIB_ATOMIC_MAC
-    void ref() { OSAtomicIncrement32Barrier(const_cast<int32_t*>(&refCount)); }
-    bool deref() { return ! OSAtomicDecrement32Barrier(const_cast<int32_t*>(&refCount)); }
+    void ref() { ATOMIC_INT(refCount); }
+    bool deref() { return ! ATOMIC_DEC(refCount); }
     int32_t count() { return refCount; }
   private:
-    volatile int32_t refCount;
-#elif defined(TAGLIB_ATOMIC_WIN)
-    void ref() { InterlockedIncrement(&refCount); }
-    bool deref() { return ! InterlockedDecrement(&refCount); }
-    long count() { return refCount; }
-  private:
-    volatile long refCount;
-#elif defined(TAGLIB_ATOMIC_GCC)
-    void ref() { __sync_add_and_fetch(&refCount, 1); }
-    bool deref() { return ! __sync_sub_and_fetch(&refCount, 1); }
-    int count() { return refCount; }
-  private:
-    volatile int refCount;
-#else
-    void ref() { refCount++; }
-    bool deref() { return ! --refCount; }
-    int count() { return refCount; }
-  private:
-    unsigned int refCount;
-#endif
+    volatile ATOMIC_INT refCount;
   };
 
 }
-- 
2.39.2

