# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python

import glob
import os
import shutil

from cerbero.utils import android

class Recipe(recipe.Recipe):
    name = 'libwebp'
    version = '1.2.0-rc3'
    stype = SourceType.TARBALL
    btype = BuildType.CUSTOM
    url = 'https://github.com/webmproject/libwebp/archive/v1.2.0-rc3.tar.gz'
    tarball_checksum = '7505579ca0f290ad1847078c1e18f990c0ee5652aca7414687808382fe2d1223'
    allow_parallel_build = True

    def prepare(self):
        if self.config.target_platform != Platform.ANDROID:
            raise InvalidRecipeError(self, 'Unsupported platform')

    async def compile(self):
        shell.symlink(self.build_dir, '{0}/jni'.format(self.build_dir))
        await shell.async_call(['{0}/ndk-build'.format(self.config.toolchain_prefix), 'ENABLE_SHARED=1'],
                                cmd_dir=self.build_dir, logfile=self.logfile)

    async def install(self):
        arch_name = android.get_android_arch_name(self.config.target_arch)
        libdir_dest = os.path.join(self.config.prefix, 'lib')
        shared_libdir_src = os.path.join(self.build_dir, 'libs', arch_name)
        shared_libs = glob.iglob(os.path.join(shared_libdir_src, '*.so'))
        for file_name in shared_libs:
            full_file_name = os.path.join(shared_libdir_src, file_name)
            shutil.copy(full_file_name, libdir_dest)
        static_libdir_src = os.path.join(self.build_dir, 'obj', 'local', arch_name)
        static_libs = glob.iglob(os.path.join(static_libdir_src, '*.a'))
        for file_name in static_libs:
            full_file_name = os.path.join(static_libdir_src, file_name)
            shutil.copy(full_file_name, libdir_dest)
        headers_dest = os.path.join(self.config.prefix, 'include', 'webp')
        if not os.path.exists(headers_dest):
            os.makedirs(headers_dest)
        headers_src = os.path.join(self.build_dir, 'src', 'webp')
        headers = glob.iglob(os.path.join(headers_src, '*.h'))
        for header in headers:
            full_header_name = os.path.join(headers_src, header)
            shutil.copy(full_header_name, headers_dest)
